{"pageProps":{"codelog":{"tags":["javascript","functions"],"title":"2019-05-15","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Finished watching - <a href=\"https://frontendmasters.com/courses/javascript-basics/\">Introduction to JavaScript Programming</a> by Kyle Simpson.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Start watching <a href=\"https://frontendmasters.com/courses/js-fundamentals-functional-v2/\">JavaScript: From Fundamentals to Functional JS, v2</a> by Bianca Gandolfo</li>\n</ul>\n<h2>Learned today</h2>\n<h3>Boolean evaluation</h3>\n<p>Each value has a inherent boolean value, even if it is not directly a Boolean (<code>true</code> / <code>false</code>). Those are <em>truthy</em> and <em>falsy</em> values which, when coerced into a Bool, will evaluate to <code>true</code> and <code>false</code> repsectively.</p>\n<p>The following values are <strong>always</strong> falsy:</p>\n<ul>\n<li><code>0</code> (zero), <code>-0</code> (negative zero), <code>NaN</code>,</li>\n<li><code>\"\"</code> or <code>''</code> (empty string),</li>\n<li><code>false</code>,</li>\n<li><code>undefined</code>,</li>\n<li><code>null</code>.</li>\n</ul>\n<p>Everything else is truthy. This includes:</p>\n<ul>\n<li><code>function() {}</code> (empty function declaration),</li>\n<li><code>'0'</code> (a string containing a single zero),</li>\n<li><code>'false'</code> (a string containg word <em>false</em>),</li>\n<li><code>{}</code> (empty object).</li>\n</ul>\n<h3>Boolean evaluation in conditional statements</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-string\">'test'</span>;\n\n<span class=\"hljs-keyword\">if</span> (a) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'I entered IF'</span>);\n}</code></pre>\n<p>This code snippet will log \"I entered IF\" because <code>a</code> is a string, which is a truthy value evaluating to <code>true</code>.</p>\n<h3>Functions</h3>\n<h4>Types</h4>\n<p>Function declaration: <code>function foo() {}</code></p>\n<p>Function expressions attached to a variable declaration:</p>\n<ul>\n<li><code>var bar = function() {}</code></li>\n<li><code>var bar = function baz() {}</code></li>\n</ul>\n<h4>Parameters vs. arguments</h4>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">a</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(a);\n}\n\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-number\">1</span>;\nfoo(b);</code></pre>\n<p><code>a</code> is a <strong>parameter</strong> (in function declaration).\n<code>b</code> is a <strong>argument</strong> (in invoking function).</p>\n<h3>Functional programming vs. OOP</h3>\n<p>If you think about programming as a language, OOP would be nouns while functional programming would be about verbs.</p>\n<p>The idea in OOP is to create pure functions, which are predictable and easier to test. In the real world of web development, there are too many side effects (e.g. manipulating DOM). Functional programming also improves readability of the code.</p>\n<h2>Resources list</h2>\n<ul>\n<li><a href=\"https://www.sitepoint.com/javascript-truthy-falsy/\">www.sitepoint.com/javascript-truthy-falsy</a></li>\n</ul>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}