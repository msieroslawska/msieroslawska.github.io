{"pageProps":{"codelog":{"tags":["javascript","css"],"title":"2019-07-03","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Continue watching <a href=\"https://frontendmasters.com/courses/javascript-hard-parts/\">JavaScript: The Hard Parts</a> by Will Sentance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Start watching <a href=\"https://frontendmasters.com/courses/getting-started-javascript-v2/\">Getting Started with JavaScript, v2</a> by Kyle Simpson</li>\n</ul>\n<h2>Learned today</h2>\n<h3>How do we avoid repeating ourselves? (c.d.)</h3>\n<ol start=\"3\">\n<li><code>new</code> operator</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">userCreator</span>(<span class=\"hljs-params\">name, score</span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.name = name;\n  <span class=\"hljs-built_in\">this</span>.score = score;\n}\n\nuserCreator.prototype; <span class=\"hljs-comment\">// {}</span>\nuserCreator.prototype.increment = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.score++;\n};\n\n<span class=\"hljs-keyword\">let</span> user1 = userCreator(<span class=\"hljs-string\">'Will'</span>, <span class=\"hljs-number\">6</span>);</code></pre>\n<p>Using <strong>new</strong> automates 2 things: creating a new object and returning it. The new object does not have a custom label anymore. Instead, it is referred to as <strong>this</strong>.</p>\n<p>It also creates a bond to <code>UserCreator</code>'s <code>prototype</code> where it stores all the shared properties (instead of <code>userFunctionStore</code> from previous examples).</p>\n<p>JS functions are just objects with an extra <code>call</code> method being invoked when a function is called.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">User</span>(<span class=\"hljs-params\">name, score</span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.name = name;\n  <span class=\"hljs-built_in\">this</span>.score = score;\n}\n\nUser.prototype.increment = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.score++;\n};\n\nUser.prototype.login = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Login'</span>);\n};\n\n<span class=\"hljs-keyword\">let</span> user = <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">'Eva'</span>, <span class=\"hljs-number\">10</span>);\nuser.increment();</code></pre>\n<ol>\n<li><code>new</code> creates an empty object and assigns it to a label <code>this</code>.</li>\n<li><code>__proto__</code> from <code>this</code> is linked to <code>User.prototype</code>.</li>\n<li>There is no need for explicit return, <code>new</code> returns object labeled as <code>this</code>.</li>\n</ol>\n<p>If we call <code>User</code> without <code>new</code> it will not work. <code>this</code> will be pointing to the global object. As this syntax looks just like another function, it's easy to forget that it requires <code>new</code>.</p>\n<ol start=\"4\">\n<li><code>Class</code> syntactic sugar</li>\n</ol>\n<p>Solution 3 does not allow the following syntax:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">User</span>(<span class=\"hljs-params\">name, score</span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.name = name;\n  <span class=\"hljs-built_in\">this</span>.score = score;\n  <span class=\"hljs-built_in\">this</span>.increment = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.score++;\n  };\n}</code></pre>\n<p>By using <code>Class</code> we can introduce a <em>constructor</em> which will be a collection of all the methods and properties.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(name, score) {\n    <span class=\"hljs-built_in\">this</span>.name = name;\n    <span class=\"hljs-built_in\">this</span>.score = score;\n  }\n\n  increment() {\n    <span class=\"hljs-built_in\">this</span>.score++;\n  }\n\n  login() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Login'</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> user = <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">'John'</span>, <span class=\"hljs-number\">14</span>);\nuser.increment();</code></pre>\n<h2>Resources list</h2>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}