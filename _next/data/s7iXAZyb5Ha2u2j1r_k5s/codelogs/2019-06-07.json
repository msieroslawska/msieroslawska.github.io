{"pageProps":{"codelog":{"tags":["javascript","callback"],"title":"2019-06-07","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Continue watching <a href=\"https://frontendmasters.com/courses/javascript-hard-parts/\">JavaScript: The Hard Parts</a> by Will Sentance</li>\n</ul>\n<h2>Learned today</h2>\n<h3>Callback queue</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">printHello</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello'</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">blockFor1Sec</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">//</span>\n}\n\n<span class=\"hljs-built_in\">setTimeout</span>(printHello, <span class=\"hljs-number\">0</span>);\nblockFor1Sec();\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Me first'</span>);</code></pre>\n<p>If the engine is busy executing a function (<code>blockFor1Sec</code>) and in the meantime <code>setTimeout</code>'s timer is done, then <code>printHello</code> is going to be added to <strong>callback queue</strong>. Anything in that queue is going to be pushed to call stack once it's <strong>empty</strong> and the global execution context has finished all its tasks (<code>console.log('Me first)</code>). And in our example, even though our <code>setTimeout</code> timer was set to 0, it was only executed after 1s.</p>\n<p>The process of checking if call stack is ready to get anything from the callback queue and pushing to it is called <strong>event loop</strong>.</p>\n<p>There are many things where waiting would block our thread and we are using browser APIs instead:</p>\n<ul>\n<li>a timer to finish running,</li>\n<li>new information from server (Ajax),</li>\n<li>indication that a protion of a page has loaded,</li>\n<li>user interaction (clicks, mouseovers, etc.),</li>\n<li>writing / reading to file system (node),</li>\n<li>writing / reading database (node).</li>\n</ul>\n<h3><code>XMLHttpRequest</code></h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">display</span>(<span class=\"hljs-params\">data</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(data.post);\n}\n\n$.get(<span class=\"hljs-string\">'http://twitter.com/willsen/tweet/1'</span>, display);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Me first'</span>);</code></pre>\n<p>In the example above we only log the data, but there is no way to store it / pass into a variable. We could add another function inside <code>display</code> which would parse the data, but that leads to callback hell.</p>\n<h2>Resources list</h2>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}