{"pageProps":{"article":{"title":"[What a Frontend Engineer should know] CSS specificity","content":"<p><em>This is a part of larger series I am writing as answers to <a href=\"https://solutionchaser.com/rekrutacja-na-front-end-developera-porady-pytania/\">these questions (PL)</a> posted as preparation for an interview as a frontend engineer.</em></p>\n<p>CSS bases on different building blocks: tags, classes, pseudo-classes, etc. <strong>Specificity</strong> is CSS's way of defining which style decorations should took precedence in case of conflicts.</p>\n<hr>\n<p>Let's look at the following code:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">h1</span> {\n    <span class=\"hljs-attribute\">color</span>: red;\n  }\n\n  <span class=\"hljs-selector-class\">.header</span> {\n    <span class=\"hljs-attribute\">color</span>: blue;\n  }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"header\"</span>></span>This is a header<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></code></pre>\n<p>In the code above we define styles for all <code>h1</code> elements present on the page (you should avoid using tags as CSS has a <strong>global</strong> scope) and for all elements containing a <code>header</code> class. The result will be a <em>blue</em> text, because class selectors have <strong>higher specificity</strong> over tags.</p>\n<h2>Specificity rules</h2>\n<p>Specificity is a score calculated as a sum of grades coming from all selectors. If a conflict occurs, style with higher specificity will be used. If specificity of two or more styles is the same, the rules of cascading kick in and the <strong>last</strong> declared rule will be used.</p>\n<p>The rules can be divided as following:</p>\n<ul>\n<li>0 for <code>*</code>, <code>></code>, <code>~</code>,</li>\n<li>1 for each tag and pseudo-element,</li>\n<li>10 for each class, attribute and pseudo-class,</li>\n<li>100 for each id,</li>\n<li>1000 for inline style,</li>\n<li>10000 for <code>!important</code>.</li>\n</ul>\n<p>Coming back to the previous example, it is clear why a class selector (specificity 10) took over a tag (specificity 1).</p>\n<h2>More examples</h2>\n<ul>\n<li><code>p</code>: 1,</li>\n<li><code>#foo</code>: 100,</li>\n<li><code>.header.main</code>: 20,</li>\n<li><code>a::before</code>: 2,</li>\n<li><code>h1.header.main</code>: 21,</li>\n<li><code>[type=radio]</code>: 10.</li>\n</ul>\n<h3>Good patterns</h3>\n<ul>\n<li>Remember that CSS has a global scope. Avoid using tag selectors (<code>p</code>, <code>span</code>, <code>div</code>) unless you are 100% sure you want the styling to be applied to all elements of the same type.</li>\n<li>Make your life easier and avoid future problems of overriding high specificity selectors by:<ul>\n<li>keeping your CSS as simple as possible,</li>\n<li>avoiding complex selectors,</li>\n<li>avoiding chaining class selectors,</li>\n<li>not using IDs if possible. Not only are they hard to override with their high specificity, they are also unique and hard to repurpose,</li>\n<li>forgetting about <code>!important</code>. Don't be lazy :)</li>\n</ul></li>\n</ul>\n<h2>Sources</h2>\n<ul>\n<li><a href=\"https://frontendmasters.com/courses/web-development-v2/\">FrontendMasters / Complete intro to web development</a></li>\n</ul>\n"}},"__N_SSG":true}