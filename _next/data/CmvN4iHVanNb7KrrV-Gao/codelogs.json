{"pageProps":{"codelogs":[{"content":"\n## Plan for the day\n\n- [x] Finish an article about specificity.\n- [x] Start watching [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/) by Brian Holt.\n  - Don't forget to make notes!\n- [x] Start moving content to subdomains to have a clear landing page.\n\n## Learned today\n\n- You can have multiple images in a single `*.svg` file and access them via their IDs:\n\n```html\n<img src=\"/assets/img/icon.svg#github\" />\n```\n\n## Resources list\n\n## Other resources","tags":["svg"],"title":"2019-04-16","slug":{"year":"2019","month":"04","day":"16"}},{"content":"\n## Plan for the day\n\n- [x] Start an outline of TODOs and skills I would like to read about next. It's hard to stay focused with so many online resources. It is necessary to prioritize!\n- [x] Start logging my programming progress! I found this idea on [dev.io](https://dev.io), its author is [codeidoscope](https://github.com/codeidoscope), kudos! I constantly struggle with imposter syndrome, even though I am perfectly aware it does not make sense.\n- [x] Figure out how to attach a global TODO list to all my codelogs. I do not want to plan what I'm gonna do exactly *the next day*, as I don't want to commit myself to daily work. I've tried that and for a while it works great until I lose the schedule and feel constantly guilty about not sticking to it. It's supposed to be fun and helpful, not a chore!\n- [x] Continue watching [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/).\n\n## Learned today\n\n- Piping Jekyll layouts was easier than expected. For some reason initially my mind was looping over it without understanding!\n- I had to double check how to create checkboxes in vanilla HTML. Using markdown spoils you!\n- You can indeed parameterize your templates! (see [docs](https://jekyllrb.com/docs/includes/#passing-parameters-to-includes))\n\n## Resources list\n\n- [Checkbox documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox)\n- [How to log your programming progress](https://dev.to/codeidoscope/tracking-your-progress-to-improve-your-confidence-12lh)\n\n## Other resources\n\n- [Frontend Masters 2019 Handbook](https://frontendmasters.com/books/front-end-handbook/2019/)\n- [How to write an awesome README](https://dev.to/healeycodes/how-to-write-an-awesome-github-readme-2ldc)\n- [README template](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2)\n- [Vanilla calendar in JS](https://dev.to/knheidorn/making-a-calendar-in-vanilla-javascript-48j8)\n","tags":["jekyll"],"title":"2019-04-17","slug":{"year":"2019","month":"04","day":"17"}},{"content":"\n## Plan for the day\n\n- [x] Work on a HTML + CSS project from FE class, ~~possibly finish it~~.\n- [x] Continue watching [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/).\n\n## Learned today\n\n- I completely forgot how to center an image with CSS. No, it's not `text-align: center` :)\n\n  ```css\n  .center {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    width: 50%;\n  }\n  ```\n\n- VSCode has integrated Emmet which can be **so** helpful! Typing: `section.main-header.story*2>lorem:50` and then pressing `Tab` will automatically create two `section` elements with classes `main-header` and `story` containing *Lorem ipsum* which is 50 words long. How awesome is that?!\n- Scoping in Javascript: I already knew that `let` and `const` are block-scoped, but I'd like to note down the following behavior:\n\n  ```javascript\n  let x = 1;\n\n  function f() {\n    x = 2;\n  }\n\n  console.log(x); // 1\n  f();\n  console.log(x); // 2\n  ```\n\n  At a first glance, I would say `x` preserves its original value, as the `x = 2` assignment should only be \"visible\" within the function scope, and that's **not** true!\n\n## Resources list\n\n- [How to center an image](https://www.w3schools.com/howto/howto_css_image_center.asp)\n\n## Other resources\n\n- Flexbox\n  - [https://mastery.games/p/flexbox-zombies](https://mastery.games/p/flexbox-zombies)\n  - [https://flexboxfroggy.com/](https://flexboxfroggy.com/)\n","tags":["css","scope","vscode","javascript"],"title":"2019-04-18","slug":{"year":"2019","month":"04","day":"18"}},{"content":"\n## Plan for the day\n\n- [x] Finish the HTML + CSS project.\n  - It's available here: [../../projects/web-dev/01-The-news-times/index.html](../../projects/web-dev/01-The-news-times/index.html)\n- [x] Continue watching [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/).\n\n## Learned today\n\n- I watched more of Brian's videos about JS fundamentals to make sure I am not missing anything. He mentioned there is a quite clever pattern to avoid `this` rabbit hole for objects. Instead of making `getName` a function inside the object:\n\n  ```javascript\n  const me = {\n    name: {\n      first: 'Brian',\n      last: 'Holt',\n    }\n    getName() {\n      return `My name is ${this.name.first} ${this.name.last}.`\n    }\n  }\n  ```\n\n  why not just declare it as a separate function in global scope and pass the object?\n\n  ```javascript\n  const me = {\n    name: {\n      first: 'Brian',\n      last: 'Holt',\n    }\n  }\n\n  getName(person) {\n    return `My name is ${person.name.first} ${person.name.last}.`\n  }\n  ```\n\n- Finishing the first HTML / CSS project made me realize how hard `flex` can be. I need way more practice with this.\n- If you want to add an element on the first place in an array, you use `Array.prototype.unshift()`. Not the easiest to remember, I know. But somehow somebody thought that removing the first element would be `Array.prototype.shift()` and tried to maintain the logic.\n\n## Resources list\n\n## Other resources\n","tags":["javascript"],"title":"2019-04-19","slug":{"year":"2019","month":"04","day":"19"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/).\n\n## Learned today\n\n- The part of Brian's course I watched today was covering DOM and event listeners. He mentioned an interesting pattern for displaying an input character from a keystroke:\n\n  ```html\n  <input placeholder=\"Type here!\" class=\"input-to-copy\">\n  <p class=\"p-to-copy-to\">Nothing has happened yet.</p>\n\n  <script>\n    const input = document.querySelector('.input-to-copy');\n    const paragraph = document.querySelector('.p-to-copy-to');\n\n    input.addEventListener('keyup', function () {\n        paragraph.innerText = input.value;\n    });\n  </script>\n  ```\n\n  Notice that the listener is attached to the `keyup` event. If we used `keydown` instead, `paragraph.innerText` would be overwritten by a previous keystroke character, not the current one (e.g. typing *abc* would show *ab* in `paragraph`).\n- All events are *bubbling* (by default, this can be disabled), meaning they fire up and then get trasfered to the parent element, then to grandparent, etc. until they reach the root element. It can come very handy when we'd want to attach a same-event listener to multiple elements, like so:\n\n  ```html\n  <div class=\"button-container\">\n    <button>1</button>\n    <button>2</button>\n    <button>3</button>\n  </div>\n\n  <script>\n    document.querySelector('.button-container')\n      .addEventListener('click', function (event) {\n        alert(`You clicked on button ${event.target.innerText}`);\n      });\n  </script>\n  ```\n\n  In the example above we need only one `click` listener, as clicking on each button will bubble the event to its parent, where the listener is attached.\n\n  It is important to add that clicking on *any* element in the parent element will trigger the event (e.g. an empty area next to the buttons). To prevent that, we can add an additional check for the target type:\n\n  ```html\n  <script>\n    document.querySelector('.button-container')\n      .addEventListener('click', function (event) {\n        if (event.target.tagType === 'BUTTON') {\n          alert(`You clicked on button ${event.target.innerText}`);\n        }\n      });\n  </script>\n  ```\n\n- `event.stopPropagation()` stops the propagation of events at the moment of being called and after (events from before will successfully bubble).\n- I moved to another computer where I had an outdated local copy of my repo. I wanted to update files with the current state and history of the remote, so I used `git pull origin master`. What I ended up with was:\n\n  - Commit merging the `master` branch\n  - The most recent remote commit\n  - 2nd most recent remote commit\n  - ...\n  - 1st remote commit\n  - The most recent local commit\n  - ...\n  - 1st local commit\n\n  Ooops... that is not what I wanted. Having the whole local history gave me all the outdated files from times I was experimenting with Jekyll layouts. Luckily, stackoverflow comes to the rescue as usual. What I need was:\n\n  ```bash\n  git fetch --all\n  git reset --hard origin/master\n  ```\n\n  The main question now is **why**? I'm adding that to my TODO!\n\n- With my merge I somehow lost my custom CSS for `about` page images and I had to add it again. Just for the future reference (in case I mess up again), this is how you address specific images based on their source:\n\n  ```css\n  img[src*=\"#about-picture\"] {}\n  ```\n\n## Resources list\n\n- [How to force `git pull` to overwrite local files](https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files)\n\n## Other resources\n","tags":["dom","events","html","git"],"title":"2019-04-21","slug":{"year":"2019","month":"04","day":"21"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/).\n- [x] Implement a fetcher for random doggo pics.\n  - Implemented [here](../../projects/web-dev/03-dog-ceo/index.html)\n\n## Learned today\n\n- **AJAX**: used when a website requests more information from a server after the page is loaded.\n- `fetch()`: a built-in browser tool, returns a promise.\n- **API**: stands for *Application Programming Interface*. If you want to know what a public API returns, you should read the documentation, like [this one](https://dog.ceo/dog-api/documentation/random).\n\n  This is a sample rensponse from dog.ceo random API:\n\n  ```javascript\n  {\n    \"status\": \"success\",\n    \"message\": \"https://images.dog.ceo/breeds/affenpinscher/n02110627_11783.jpg\"\n  }\n  ```\n\n  Combining all of the above, we can use the API to display random images like so:\n\n  ```javascript\n  const DOG_URL = \"https://dog.ceo/api/breeds/image/random\";\n\n  fetch(DOG_URL).then(response => response.json()).then(parsedResponse => console.log(parsedResponse.message));\n  ```\n\n- **Node**: think about it as a JS on a server (outside the browser).\n- `npm`: a package manager for node. Uses `package.json` to specify packages and dependencies.\n- importing modules\n  - `CommonJS`\n\n    ```javascript\n    require('./path/to/file');\n    ```\n\n  - ES6\n\n    ```javascript\n    import('./path/to.file');\n    ```\n\n- If you use `document.querySelector('.add-doggo').addEventListener('click', addNewDoggo)` from Brian's example, you need to move `<script>` to the end of `<body>`. Otherwise browser will complain that `document.querySelector('.add-doggo')` is `null` as the script will load before the page and its elements are created.\n\n  ```html\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Doggos fetcher</title>\n  </head>\n\n  <body>\n    <h1>Doggos fetcher</h1>\n    <div class=\"doggos\" />\n    <button class=\"add-doggo\">Add new doggo</button>\n\n    <script src=\"./doggos.js\"></script>\n  </body>\n  ```\n\n- I had an issue with unresolved promise when trying to create new image on the button click. My initial implementation looked like this:\n\n  ```javascript\n  const addNewDoggo = () => {\n    const randomUrl = fetch(DOGGOS_URL)\n      .then(response => response.json())\n      .then(processedResponse => {\n        const url = processedResponse.message\n      });\n\n    const img = document.createElement('img');\n    img.src = randomUrl;\n    img.alt = 'Cute doggo';\n    doggos.appendChild(img);\n  };\n  ```\n\n  This did not work as `randomUrl` was a promise, not my desired URL. What did work though (and is way simpler) is shifting image creation to the body of the last `then`:\n\n  ```javascript\n  const addNewDoggo = () => {\n    fetch(DOGGOS_URL)\n      .then(response => response.json())\n      .then((processedResponse) => {\n        const url = processedResponse.message;\n\n        const img = document.createElement('img');\n        img.src = url;\n        img.alt = 'Cute doggo';\n        doggos.appendChild(img);\n      });\n  };\n  ```\n\n## Resources list\n\n## Other resources\n\n- [A nice list of public APIs](https://github.com/toddmotto/public-apis)\n","tags":["ajax","api","javascript","html","promise"],"title":"2019-04-22","slug":{"year":"2019","month":"04","day":"22"}},{"content":"\n## Plan for the day\n\n- [x] Finish watching [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/).\n- [x] Start watching - [Mastering Chrome Developer Tools, v2](https://frontendmasters.com/courses/chrome-dev-tools-v2/) by Jon Kuperman. Master your devtools!\n\n## Learned today\n\n- You can pipe stuff in Shell into the clipboard, e.g. `cat index.html | pbcopy`.\n- I have finished the \"Complete intro to web development\" class!\n\n## Resources list\n\n## Other resources\n\n- [Shell commands and flags explained](https://explainshell.com/)\n- [Helper to create licenses for Github projects](https://choosealicense.com/)\n- [How to contribute to open source for the first time](https://www.firsttimersonly.com/)\n","tags":["shell"],"title":"2019-04-23","slug":{"year":"2019","month":"04","day":"23"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching - [Mastering Chrome Developer Tools, v2](https://frontendmasters.com/courses/chrome-dev-tools-v2/) by Jon Kuperman.\n\n## Learned today\n\n- You can use Chrome DevTools as **IDE** (`<insert screaming face emoji here>`)!!\n- Pressing `escape` key on any tab (except console) opens \"Console drawer\".\n\n### \"Elements\" tab\n\n- Press `opt / alt` key and click the expand arrow of any DOM node to expand all the children nodes.\n- Right-click on a node and pick \"Scroll into view\" to move focus into that element -- especially helpful for infinite scroll websites.\n- In CSS editor, clicking on any color swatch opens color panel. Click on the 2nd set of arrows opens color palette, from where you can pick some pre-defined nice palettes (e.g. *Material Design*) or custom palette based on current colors of the website. Long-click on any color opens up options with multiple shades.\n- You can click on a node and press `h` to hide the element. (it behaves like `visibility: hidden`, i.e. keeps space in DOM). Pressing `delete` key removes the element completely from DOM.\n  - Having a specific selector on that element with `visibility: visible !important` overrides the `h` shortcut.\n- You can trigger various states of element, e.g. `hover`. With an element highlighted, click on `:hov` button where you can simulate element state.\n\n## Resources list\n\n- [Chrome DevTools official documentation](https://developers.google.com/web/tools/chrome-devtools/)\n\n## Other resources\n","tags":["devtools"],"title":"2019-04-24","slug":{"year":"2019","month":"04","day":"24"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching - [Mastering Chrome Developer Tools, v2](https://frontendmasters.com/courses/chrome-dev-tools-v2/) by Jon Kuperman.\n\n## Learned today\n\n- This one is not related to my current FE class, but I read today that React.js has a neat way to avoid props hell when a n-th child of the component needs some value from it. Instead of passing it via props through the chain of all children components, you can use _Context_ to make it available to all components in the tree (like a global variable). It's especially helpful when certain props are used by multiple children components.\n\n### \"Elements\" tab (cd.)\n\n- _Computed_ tab shows the final state of styles after browser parsed all the CSS. You can hover on a property and there will be an arrow next to the value. Clicking on it will take you to the actual source of that rule.\n\n  ![Computed style source](/img/codelogs/computed-style-source.png)\n\n- _Event listeners_ tab is helpful in debugging performance issues, e.g. for slow scroll performance you could check the list of all `scroll` listeners and their source code.\n- CSS allows different color formats to specify color of an element. You can change the displayed format by pressing and holding Shift key and then clicling on a color swatch.\n\n  ![Color formats](/img/codelogs/color-formats.png)\n\n### \"Sources\" tab\n\n- Bottom left corner of the source code editor has a button which will pretty print minified production code.\n\n  ![Pretty print](/img/codelogs/pretty-print.png)\n\n- Chrome is using files collected in `localhost`, but you could add a folder with the actual source code and browser will try to map the source and `localhost` files. This way any changes saved in the browser will be also saved in your codebase. To do that, go to the _Filesystem_ tab and add your project folder (you will have to allow Chrome to write to disk). Afterwards you will see some (or all) files and rules having green dots at their icons, which means they've been mapped to source code and all changes to those will persist.\n\n  ![Add to workspace](/img/codelogs/add-to-workspace.png)\n\n  Modyfing DOM structure and elements (e.g. changing `div` into `p`, changing the order of elements) in the _Elements_ tab will **not** be saved to disk (you're editing DOM which is not the source, but an output of parsed source).\n\n  Modifying CSS in a project using a CSS preprocessor like SaSS **will work** `<gasp>`!!\n\n- After selecting a node in _Elements_ and going to Console, the selected node will be available under `$0` variable. Selecting another node will make that available under `$0` and the previously selected node will be `$1`. The history will go up to `$4`.\n- DevTools provide jQuery selectors even if you don't explicitly use jQuery.\n\n#### Breakpoints\n\n- To set a breakpoint you can either:\n  - manually type `debugger` in your code before the line you want the breakpoint on and refresh the page with DevTools open,\n  - open the file in the _Sources_ tab, click on the line number (with actionable code) and get a blue arrow on it.\n- You can also set conditional breakpoints by right-clicking on a code line, selecting _Add conditional breakpoints_ and typing a condition in the box. Such breakpoints are marked in orange.\n- Breakpoints do **not** travel back in time, only move forward.\n\n* The right-hand panel has the following tabs:\n\n  - _Watch_ allows you to put any expression (one or more variables) and monitor its state (if it's been defined in the scope).\n  - _Call stack_ explains \"How did we get here?\"\n    - If anything in the call stack is not important (e.g. comes from an external library or your app uses React and you'd like to see `setState`, not how React manipulates the DOM) you can right-click on that particular line and select _Blackbox script_.\n    - You can also enable global blackboxing via _Three dots menu > Settings > Blackboxing_.\n    - Call stack allows you to step back and forth through time (unlike breakpoints).\n    - **Tip**: while you are in call stack you can use _Watch_!\n  - _Scope_ tells you exactly what you have access to at this time. It might get a bit messy with many DOM APIs, so you might prefer to watch for specific variables via _Watch_.\n  - _Breakpoints_ lists all breakpoints. Click on a checkbox next to a breakpoint to deactivate it or right-click for more options (delete, disable, deactivate, etc.).\n  - _XHR / fetch breakpoints_ are breakpoints set on fetching specific URL(s). They are very useful combined with _Call stack_ and _Watch_ for monitoring internal variables .\n  - _DOM breakpoints_ shows all breakpoints which you can set by right-clicking on a DOM element and selecting the _Break on_ option in the context menu. Useful in a situation when you know something is modifying DOM, but you do not know what and where.\n\n    Available options are:\n\n    - subtree modifications (which element inside of the tree is modifying the element?),\n    - attribute modifications (what is modifying data attribute, class, id, etc.?),\n    - node removal (what is deleting the element?).\n\n  - _Global listeners_\n  - _Event listener breakpoints_\n\n## Resources list\n\n- [React.js context docs](https://reactjs.org/docs/context.html)\n\n## Other resources\n","tags":["devtools","react"],"title":"2019-04-27","slug":{"year":"2019","month":"04","day":"27"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching - [Mastering Chrome Developer Tools, v2](https://frontendmasters.com/courses/chrome-dev-tools-v2/) by Jon Kuperman.\n\n## Learned today\n\n### \"Network\" tab\n\nIt can help answer questions similar to _\"Why are the requests so slow?\"_:\n\n- Is it because they are too big?\n- Are we asking for too many?\n- Is it a server problem?\n- Is it possible we're trying to fetch from two different sources?\n\n- X axis is always time, each bar is an item.\n- Bottom part of the tab shows detailed information about each fetched resource (usually) in order of being described in `<head>` tag. First item to be loaded is HTML which gets parsed and analyzed for calls to other resources (images, CSS, scripts, etc/).\n  - Browser will try to assess priority of each resource and reduce or increase it (e.g. de-prioritizing image files over CSS).\n- _Initiator_ tab shows source of the network call.\n  - Hold _SHIFT_ and hover over an item to see different background colors. Green shows the file where it's been downloaded from; red shows what it has called.\n- _Size_ will sometimes show two values: actual size and compressed / cached.\n\n### Color codes\n\n- White: queuing (put on hold as max 6 requests at the same time are allowed or de-prioritized; that's why file bundling is **so important**).\n- Grey: stalled / blocking.\n- Light grey: proxy negotiation.\n- Green: DNS lookup (it's cached for multiple requests to the same resource).\n- Orange: initial connection / connecting (including TCP handshakes / retries and negotiating SSL).\n- Brown: completing SSL handshake.\n- Light green: request sent / sending.\n- Light green: waiting (time to first byte).\n- Blue: content download / downloading.\n\n### Screenshots tool\n\n![Network screenshot](/img/codelogs/network-screenshot.png)\n\nIf active, it will show every repaint and what the page looked like at that state in time.\n\n## Resources list\n\n## Other resources\n","tags":["devtools"],"title":"2019-04-29","slug":{"year":"2019","month":"04","day":"29"}},{"content":"\n## Plan for the day\n\n- [x] Work on vanilla JS calculator from [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/) class.\n\n## Learned today\n\nI started working on the calculator by getting HTML and CSS setup first. This is the current visual state:\n\n![Calculator progress 01](/img/codelogs/calc-progress-01.png)\n\nObviously this is nothing great. I have issues with `flex` and aligning items; I also need to figure out how to stretch the buttons to get 100% coverage of background color. :(\n\nI think I might read about `grid` more, because something tells me this would be way easier.\n\n## Resources list\n\n- [Centering a block horizontally and vertically](https://css-tricks.com/centering-css-complete-guide/#center-horizontally-and-vertically)\n- [The best and only guide to flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) (I get back to it constantly!)\n\n## Other resources\n","tags":["javascript"],"title":"2019-04-30","slug":{"year":"2019","month":"04","day":"30"}},{"content":"\n## Plan for the day\n\n- [x] Work on vanilla JS calculator from [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/) class.\n  - [x] Read about `grid`.\n  - Yay, I have a working layout!\n- [x] Continue watching - [Mastering Chrome Developer Tools, v2](https://frontendmasters.com/courses/chrome-dev-tools-v2/) by Jon Kuperman.\n\n## Learned today\n\n### Grid\n\nIt's a two-dimentional layout aimed to style components into a grid. It's an extension to _flexbox_, which works just in one dimention (although they both work very well together).\n\n#### Parent container\n\n- define its layout as `display: grid`,\n- define its size with `grid-template-columns` and `grid-template-rows`, separating each item with a space:\n\n  ```css\n  .container {\n    grid-template-columns: <track-size> | <line-name> <track-size> ...;\n    grid-template-rows: <track-size> | <line-name> <track-size> ...;\n  }\n  ```\n\n  - `track-size` can be defined in pixels, percentage or a fraction of the remaining free space (using `fr` as a unit).\n  - `line-name` is optional. If you do not use names, each line is assigned positive and negative numbers:\n\n    ```css\n    .container {\n      grid-template-columns: 40px auto 50px;\n      grid-template-rows: 25% 100px auto;\n    }\n    ```\n\n    Result (markdown drawing FTW :D):\n\n    ```css\n          - 40px- - - - auto - - - - - 50px - -\n          |       |                |            |\n     - - - ------- ---------------- ------------ - [1] or [-4]\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    25%   |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n     - - - ------- ---------------- ------------ - [2] or [-3]\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    100px |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n     - - - ------- ---------------- ------------ - [3] or [-2]\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    auto  |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n     - - - ------- ---------------- ------------ - [4] or [-1]\n          |       |                |            |\n        [1]      [2]              [3]          [4]\n        [-4]     [-3]             [-2]         [-1]\n    ```\n\n  - If you decide to use names:\n\n    ```css\n    .container {\n      grid-template-columns: [first] 40px [line2] auto [col3] 50px [end];\n      grid-template-rows: [first] 25% [2nd-line] 100px [row3-end] auto [end];\n    }\n    ```\n\n    Result:\n\n    ```css\n          - 40px- - - - auto - - - - - 50px - -\n          |       |                |            |\n     - - - ------- ---------------- ------------ - [first]\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    25%   |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n     - - - ------- ---------------- ------------ - [2nd-line]\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    100px |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n     - - - ------- ---------------- ------------ - [row3-end]\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    auto  |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n    |     |xxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxx|\n     - - - ------- ---------------- ------------ - [last-line]\n          |       |                |            |\n      [first]  [line2]           [col3]       [end]\n    ```\n\n- Lines can have more than one name.\n- To avoid repetition, use `repeat()`:\n\n  ```css\n  .container {\n    grid-template-columns: repeat(3, 20px [col-start]);\n  }\n  ```\n\n  is an equivalent of:\n\n  ```css\n  .container {\n    grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start];\n  }\n  ```\n\n#### Children containers\n\n- Defined with `grid-column-start`, `grid-column-end`, `grid-row-start` and `grid-row-end`:\n\n  ```css\n  .item {\n    grid-column-start: <line> | span <number> | span <name> | auto;\n    grid-column-end: <line> | span <number> | span <name> | auto;\n    grid-row-start: <line> | span <number> | span <name> | auto;\n    grid-row-end: <line> | span <number> | span <name> | auto;\n  }\n  ```\n\n  - `line` is a number referring to a numbered grid line, or a name if the line is named,\n  - `span <number>` defines how many colums the item will be spanning through,\n  - `span <name>` defines until which named column the item will be spanning through.\n\n- `grid-column-start` and `grid-column-end` can be referred to with `grid-column` shorthand.\n- `grid-row-start` and `grid-row-end` can be referred to with `grid-row` shorthand.\n\n#### Other\n\nI don't want to copy-paste the whole CSS tricks page. There are more `grid` properties available, e.g. areas , aligning, etc.\n\n### DevTools auditing\n\nPages which can audit publicly accessible webpages:\n\n- [https://webpagetest.org](https://webpagetest.org)\n- [https://developers.google.com/web/tools/lighthouse/](https://developers.google.com/web/tools/lighthouse/)\n- [https://sonarwhal.com](https://sonarwhal.com)\n\nTo fix common audit problems:\n\n- combine external JS and CSS,\n- enable compression,\n- compress images (I should probably do that with my homepage background >.<),\n- leverage browser caching,\n- put CSS in the document head,\n- purge unused CSS rules.\n\n## Resources list\n\n- [A complete guide to grid](https://css-tricks.com/snippets/css/complete-guide-grid/)\n\n## Other resources\n","tags":["css","devtools"],"title":"2019-05-02","slug":{"year":"2019","month":"05","day":"02"}},{"content":"\n## Plan for the day\n\n- [x] Work on vanilla JS calculator from [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/) class.\n  - [x] Add button listeners for digits\n  - [x] Update the result value after clicking on a digit\n  - [x] Create a number from multiple digits\n  - [x] Reset the state on \"C\"\n\n## Learned today\n\n`isNaN()` and `Number.isNaN()` are two different functions:\n\n```javascript\nisNaN(1); // false\nisNaN('1'); // false\nisNaN(1.2); // false\nisNaN('1x'); // true\n```\n\n```javascript\nNumber.isNaN(1); // false\nNumber.isNaN('1'); // false\nNumber.isNaN(1.2); // false\nNumber.isNaN('1x'); // false\n```\n\n## Resources list\n\n## Other resources\n","tags":["javascript"],"title":"2019-05-03","slug":{"year":"2019","month":"05","day":"03"}},{"content":"\n## Plan for the day\n\n- [x] Work on vanilla JS calculator from [Complete Intro to Web Development, v2](https://frontendmasters.com/courses/web-development-v2/) class.\n  - [x] Add button listeners _only_ for digits (not result element).\n  - [x] Figure out orange background class for operators.\n  - [ ] My `tempValue` and operator handlers store everything with one step (click) delay :( Good thing I'm more familiar with the debugger!\n- [x] Continue watching - [Mastering Chrome Developer Tools, v2](https://frontendmasters.com/courses/chrome-dev-tools-v2/) by Jon Kuperman.\n\n## Learned today\n\n### CSS units\n\n#### Absolute\n\n- _cm_ / _mm_: centi- and milimiters,\n- _in_: inches (1in = 96px = 2,54cm),\n- _px_: pixels (1px = 1/96th of 1in),\n- _pt_: points (1pt = 1/72 of 1in),\n- _pc_: picas (1pc = 12 pt).\n\n#### Relative\n\n(**Viewport** = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm)\n\n- _em_: relative to the font-size of the element (2em means 2 times the size of the current font),\n- _ex_: relative to the x-height of the current font (rarely used),\n- _ch_: relative to width of the \"0\" (zero),\n- _rem_: relative to font-size of the root element,\n- _vw_: relative to 1% of the width of the viewport,\n- _vh_: relative to 1% of the height of the viewport,\n- _vmin_: relative to 1% of viewport's\\* smaller dimension,\n- _vmax_: relative to 1% of viewport's\\* larger dimension,\n- _%_: relative to the parent element.\n\n### Profiling _node.js_\n\nYou usually start running the server by `npm start`, but it is just a shortcut to a command defined in _package.json_ (e.g. `node server/index.js`). This command can be run directly which enables also adding additional flags, e.g. `node --inspect server/index.js`. It starts the server as usual, but it also shows extra debugging option in Dev Tools.\n\n![Node devtools 01](/img/codelogs/node-devtools-01.png)\n\n![Node devtools 02](/img/codelogs/node-devtools-02.png)\n\n## Resources list\n\n-[CSS units](https://www.w3schools.com/cssref/css_units.asp)\n\n## Other resources\n","tags":["css","node"],"title":"2019-05-04","slug":{"year":"2019","month":"05","day":"04"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching - [Mastering Chrome Developer Tools, v2](https://frontendmasters.com/courses/chrome-dev-tools-v2/) by Jon Kuperman.\n- [x] Write an article about new HTML5 tags (available [here](/blog/articles/html5-tags.html)).\n\n## Learned today\n\n### Performance monitoring (user-side)\n\nYou could use multiple `new Date().getTime()` to measure performance, but browser also get a dedicated API for that which bundles nicely with DevTools.\n\n#### `mark` and `measure`\n\n```javascript\nperformance.mark('start');\n// do stuff\nperformance.mark('end');\nperformance.measure('Fetching images', 'start', 'end');\nperformance.getEntriesByType('measure');\n\n// some POST request to send the data from user to you\n```\n\n#### UI\n\nGo to _Performance_ tab in DevTools and look into _User timing_ part of the chart:\n\n![Performance timing](/img/codelogs/performance-timing.png)\n\n### Image performance\n\nInstead of defining image source the usual way:\n\n```html\n<img src=\"large.jpg\" />\n```\n\nyou can use _srcset_ API:\n\n```html\n<img srcset=\"small.jpg 300w, medium.jpg 800w, large.jpg 1200w\" />\n```\n\nwhich accepts two parameters:\n\n- source of the image,\n- width at which that image should trigger.\n\nIt's a good idea to keep fallback source for older browsers:\n\n```html\n<img src=\"large.jpg\" srcset=\"small.jpg 300w, medium.jpg 800w, large.jpg 1200w\" />\n```\n\n## Resources list\n\n- [Performance API](ttps://developer.mozilla.org/en-US/docs/Web/API/Performance)\n- [SRCSET API](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset)\n\n## Other resources\n","tags":["devtools"],"title":"2019-05-06","slug":{"year":"2019","month":"05","day":"06"}},{"content":"\n## Plan for the day\n\n- [x] Start writing an article about JS data types (available [here](/blog/articles/data-types.html)).\n\n## Learned today\n\n- To escape backticks in Markdown, use double backticks and spaces:\n\n  ```html\n  `` ` ``\n  ```\n\n- I knew that primitive data types are immutable, but what happens if I reassign a variable like this:\n\n  ```javascript\n  let x = 'txt1';\n  x = 'txt2';\n  ```\n\n  Right now I'm just guessing that behind the scenes `x` is not _modified_, but why?\n\n## Resources list\n\n## Other resources\n","tags":["markdown","javascript"],"title":"2019-05-07","slug":{"year":"2019","month":"05","day":"07"}},{"content":"\n## Plan for the day\n\n- [x] Finish writing an article about JS data types (available [here](/blog/articles/data-types.html)).\n\n## Learned today\n\n## Resources list\n\n## Other resources\n","tags":[],"title":"2019-05-08","slug":{"year":"2019","month":"05","day":"08"}},{"content":"\n## Plan for the day\n\n- [x] Use the post functionality for my codelogs. I think I my brain has temporary turned into jelly when I decided to use collections for that. Why did I try to reinvent the wheel?\n\n## Learned today\n\nCSS has a functionality to add filters to images. If for any reason you don't want to either use _HSV_ color model or SaSS and its `darken` and `lighten`, you can control the darkness by:\n\n```css\nfilter: brightness(50%);\n```\n\n`0%` makes the image completely black and `100%` is the image original state.\n\nOther helpful filters are:\n\n- `blur`,\n- `contrast`,\n- `grayscale`,\n- `invert`,\n- `opacity`,\n- `saturate`.\n\n## Resources list\n\n- [www.w3schools.com](https://www.w3schools.com/cssref/css3_pr_filter.asp)\n\n## Other resources\n","tags":["css"],"title":"2019-05-09","slug":{"year":"2019","month":"05","day":"09"}},{"content":"\n## Plan for the day\n\n- [x] Write an article about JS variables (available [here](/blog/articles/variables.html)).\n\n## Learned today\n\n## Resources list\n\n## Other resources\n","tags":[],"title":"2019-05-10","slug":{"year":"2019","month":"05","day":"10"}},{"content":"\n## Plan for the day\n\n- [x] Reanimate tests in my React calc app.\n- [ ] Cover UI with tests (_in progress_)!\n- [x] Finish watching - [Mastering Chrome Developer Tools, v2](https://frontendmasters.com/courses/chrome-dev-tools-v2/) by Jon Kuperman.\n\n## Learned today\n\n- It was easier to create a new `create-react-app` project from scratch than to figure out what to add to have running tests (note to self: don't try to be smart with \"I'll add it later by myself\" attitude and just keep stuff you know you will need later like, you know, tests!). I kept my components and styling. It was as easy as copying few files and re-installing some dependencies.\n- Even though I work with React almost on a daily basis, I've never set up tests by myself. It's really interesting to see how it works from scratch!\n\n### Snapshot testing\n\nTesting React involves UI which should stay stable and not change unexpetedly. Snapshot tests render a component and compare its state with a reference snapshot stored with the test.\n\n**Jest** allows you to render and test separate components, without the need to build and render the whole app UI.\n\n- I got my first tests running!!\n\n  ![First Jest tests](/img/codelogs/first-jest-tests.png)\n\n  Now I _only_ need to figure out how exactly Jest knows when tests are okay, but it's the snapshot what should be updated...\n\n### [Chrome DevTools] Page Jank\n\nIt's jittering / jumping happening on websites, where a smooth scrolling would be expected. Obviously a bug.\n\nPossible reasons:\n\n- JS being too heavy\n\n  Smooth scrolling is defined at 60 frames / s, as the refresh rate on most devices nowadays. The browser needs to come up with a new picture (frame) for each of those refreshes. If it fails (because for example, it's busy trying to process bloated JS), we do not see smooth animation anymore.\n\n- Page trashing\n\n  Constantly modifying DOM (reading / writing) triggers the browser to keep refreshing the layout. Ideally instead of doing it in multiple read / write cycles, it's better to group similar actions together in batches for fewer layout refreshes. This, however, is rarely achievable.\n\n  Solutions:\n\n  - `window.requestAnimationFrame()` asks the browser to do some computation before next frame,\n  - `FastDOM` library provides callbacks on read and write.\n\n### [Chrome DevTools] Memory\n\nGarbage collector removes objects which are flagged as unused and no longer referenced. Sometimes though it is not possible to apply the flag (memory keeps being used) and this might be the cause of memory leaks.\n\nPossible reasons:\n\n- global variables (are you sure it has to be a global?),\n- forgotten timers and intervals,\n- variables which hold references to DOM objects which no longer exist (e.g. were deleted),\n\n- _Performance_ tab in DevTools helps you detect memory leaks while _Memory_ tab shows you the exact reason(s).\n- When recording a performance session for memory, you'd want to make it slightly **longer** (to build up memory consumption data) than in case of CPU performance tests.\n\n#### Task manager in Chrome\n\n- Accessible via _Three dots menu_ > _More tools_ > _Task manager_\n- Monitors performance of each Chrome tab\n- Right-click on column names to access more data, e.g. _JavaScript memory_\n\n#### Memory profiles\n\n- Heap snapshot: shows everything that's being used. Can be run multiple times to get results to be compared.\n- Allocation instrumentation on timeline: like multimple heap snapshots, takes a lot of time.\n- Allocation sampling: takes different samples over long period of time.\n\n**Shallow size**: how big are you?\nExample: an array with 50 elements\n\n**Retained size**: how big are elements you're pointing at (how much memory can we free up if we get rid of you)?\nExample: a variable pointing to an array with 1m elements\n\nAaaand that's how I have finished the \"Mastering Chrome developer tools\" class! Time for more!\n\n## Resources list\n\n- [Jest docs](https://jestjs.io/docs/en/tutorial-react)\n- [Jest snapshot testing](https://jestjs.io/docs/en/snapshot-testing)\n- [JS startup performance](https://medium.com/reloading/javascript-start-up-performance-69200f43b201)\n\n## Other resources\n","tags":["react","testing","devtools"],"title":"2019-05-13","slug":{"year":"2019","month":"05","day":"13"}},{"content":"\n## Plan for the day\n\n- [x] Start watching - [Introduction to JavaScript Programming](https://frontendmasters.com/courses/javascript-basics/) by Kyle Simpson.\n\n## Learned today\n\nI believe there is a significant value in going through the basics and filling the knowledge gaps otherwise you might have thought you got covered. That is why I am not skipping the beginner track in FM and watching all classes.\n\n### Statements\n\nThis is a statement: `a = b * 2;`. The rule of thumb is, statements end up with a semicolon `;`.\n\n### Expressions\n\nThe example statement consists of multiple expressions:\n\n- a literal expression of value `2`,\n- two identifier expressions `b` and `a`,\n- an arithmetic expression `b * 2`,\n- an assignment expression `a = b * 2` (without the semicolon) which is also an ex pression statement (is the last one).\n\n### Order of evaluation\n\nEvaluation happens from left to right. In `b * 2` `b` gets evaluated first.\n\nBinary operators (operators requiring two expressions) have separate rules defining the order of evaluation which can override the general left-to-right rule.\n\n1. Parenthesis\n2. Multiplication and division\n3. Addition and subtraction\n\nThis means that `2 * 2 + 1` will evaluate to `5`, not `6`.\n`2 * (2 + 1)` will evaluate to `6`, not `5`.\n\n### Executing a program\n\nComputer needs to know what to do with human-readable statements like `b * 2`. The process of translating it to a form understood by computers is called **compiling** or **interpreting**.\n\nLanguages which are interpreted are translated line by line, from top to bottom, every time the program is run.\n\nOther languages are pre-processed ahead of time (compiled), so when the program runs later, it actually is using the compiled version.\n\nJavaScript might be technically labeled as _interpreted_ language, because it is procesed every time it's run. This is not entirely true, as JavaScript engine _compiles_ the code on the fly and then immediately runs it.\n\nThis means JS code is processed **twice**. The following code snippet run as JS code would immediately throw an error about line 2:\n\n```javascript\na = 2;\n2();\n```\n\nIn the meantime, a true interpreted / scripted language would first go through line 1 and only then throw an error about line 2.\n\nJavaScript provides two types of errors:\n\n- **static** : something is wrong with the syntax,\n- **runtime** : syntax was right, but you tried to do something invalid with it (e.g. assign to a const).\n\n### Explicit / implicit variable coertion\n\n**Variables** do not have types. **Values** have types.\n\n#### Explicit\n\n```javascript\nlet a = 42;\ntypeof a; // Number\na = String(a);\ntypeof a; // String\na = Number(a);\ntypeof a; // Number\na.toString();\ntypeof a; // String\n```\n\n#### Implicit\n\n```javascript\nlet a = 42;\ntypeof a; // Number\na = a + 'a';\ntypeof a; // String\n```\n\n## Resources list\n\n- [JavaScript for cats](http://jsforcats.com/)\n- [Eloquent JavaScript](https://eloquentjavascript.net/)\n- [You don't know JS](https://github.com/getify/You-Dont-Know-JS)\n\n## Other resources\n","tags":["javascript","coercion"],"title":"2019-05-14","slug":{"year":"2019","month":"05","day":"14"}},{"content":"\n## Plan for the day\n\n- [x] Finished watching - [Introduction to JavaScript Programming](https://frontendmasters.com/courses/javascript-basics/) by Kyle Simpson.\n- [x] Start watching [JavaScript: From Fundamentals to Functional JS, v2](https://frontendmasters.com/courses/js-fundamentals-functional-v2/) by Bianca Gandolfo\n\n## Learned today\n\n### Boolean evaluation\n\nEach value has a inherent boolean value, even if it is not directly a Boolean (`true` / `false`). Those are _truthy_ and _falsy_ values which, when coerced into a Bool, will evaluate to `true` and `false` repsectively.\n\nThe following values are **always** falsy:\n\n- `0` (zero), `-0` (negative zero), `NaN`,\n- `\"\"` or `''` (empty string),\n- `false`,\n- `undefined`,\n- `null`.\n\nEverything else is truthy. This includes:\n\n- `function() {}` (empty function declaration),\n- `'0'` (a string containing a single zero),\n- `'false'` (a string containg word _false_),\n- `{}` (empty object).\n\n### Boolean evaluation in conditional statements\n\n```javascript\nlet a = 'test';\n\nif (a) {\n  console.log('I entered IF');\n}\n```\n\nThis code snippet will log \"I entered IF\" because `a` is a string, which is a truthy value evaluating to `true`.\n\n### Functions\n\n#### Types\n\nFunction declaration: `function foo() {}`\n\nFunction expressions attached to a variable declaration:\n\n- `var bar = function() {}`\n- `var bar = function baz() {}`\n\n#### Parameters vs. arguments\n\n```javascript\nfunction foo(a) {\n  console.log(a);\n}\n\nconst b = 1;\nfoo(b);\n```\n\n`a` is a **parameter** (in function declaration).\n`b` is a **argument** (in invoking function).\n\n### Functional programming vs. OOP\n\nIf you think about programming as a language, OOP would be nouns while functional programming would be about verbs.\n\nThe idea in OOP is to create pure functions, which are predictable and easier to test. In the real world of web development, there are too many side effects (e.g. manipulating DOM). Functional programming also improves readability of the code.\n\n## Resources list\n\n- [www.sitepoint.com/javascript-truthy-falsy](https://www.sitepoint.com/javascript-truthy-falsy/)\n\n## Other resources\n","tags":["javascript","functions"],"title":"2019-05-15","slug":{"year":"2019","month":"05","day":"15"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching [JavaScript: From Fundamentals to Functional JS, v2](https://frontendmasters.com/courses/js-fundamentals-functional-v2/) by Bianca Gandolfo\n  - First opinion after starting the serious part: I wish she used a code editor / browser more ofthen than slides, they too static. And picked up the pace, as I'm watching it at 1,4x - 1,6x speed :(\n\n## Learned today\n\n- Everything that uses a dot in JS is an object.\n- JS always passes by value, but in case of objects the value of the variable is a reference:\n\n  Value (primitive):\n\n  ```javascript\n  let a = { x: 1 };\n  let b = a.x;\n  a.x = 2;\n  console.log(a); // { x: 2 }\n  console.log(b); // 1\n  ```\n\n  Reference (object):\n\n  ```javascript\n  let c = { y: 1 };\n  let d = c;\n  c.y = 2;\n  console.log(a); // { y: 2 }\n  console.log(b); // { y: 2 }\n  ```\n\n- Array as just objects with some extra methods on them. Pretty basic, right? So what about this example:\n\n  ```javascript\n  let a = []];\n      a.x = 2;\n  console.log(a); // []\n  ```\n\n  I'm **guessing** here we're assigning something to `x` property of an array, not appending to its contents and that's why we still get an empty array (another suspicion is that maybe `a` got coerced to a regular object).\n\n  - Array indices are weird.\n\n  ```javascript\n  let a = [];\n  a[10] = 'x';\n  console.log(a.length); // 11 <--- WHAAAAT\n  ```\n\n## Resources list\n\n## Other resources\n","tags":["javascript","objects","arrays"],"title":"2019-05-17","slug":{"year":"2019","month":"05","day":"17"}},{"content":"\n## Plan for the day\n\n- [x] Copy resources link from codelogs to a separate page. Handy for the future.\n- [ ] Implementation of a calendar-style archive for codelogs\n  - [x] Figure out how to marry Jekyll and vanilla JS\n  - [ ] Populate the page with a full calendar using just JS\n  - [ ] Add hyperlinks for dates where codelogs exist\n  - [ ] Style everything nicely in CSS, maybe with a dropdown selection for months\n  - [ ] Add buttons for prev / next / show all simplified list, etc.\n\n## Learned today\n\nJekyll's Liquid format is a weird monstrosity when coupled with pure JS. Technically this works:\n\n```javascript\nlet posts = [];\n{% for log in site.posts %}\n  day = {{ log.date | date: '%d' }}\n  month = {{log.date | date: '%m'}}\n  year = {{log.date | date: '%Y'}}\n  posts.push({day, month, year});\n{% endfor %}\n```\n\nI hope extracting post dates can be done in a less cringy way :|\n\n## Resources list\n\n## Other resources\n","tags":["javascript"],"title":"2019-05-20","slug":{"year":"2019","month":"05","day":"20"}},{"content":"\n## Plan for the day\n\n- [ ] Implementation of a calendar-style archive for codelogs\n  - [x] Figure out how to marry Jekyll and vanilla JS\n  - [x] Populate the page with a full calendar using just JS\n  - [ ] Add hyperlinks for dates where codelogs exist\n  - [ ] Style everything nicely in CSS, maybe with a dropdown selection for months\n  - [ ] Add buttons for prev / next / show all simplified list, etc.\n\n## Learned today\n\nSo ugly, so unstyled, so proud :D\n\n![Calendar in progress](/img/codelogs/calendar-in-progress.png)\n\n## Resources list\n\n## Other resources\n","tags":[],"title":"2019-05-21","slug":{"year":"2019","month":"05","day":"21"}},{"content":"\n## Plan for the day\n\n- [x] Start watching [Coercion in JavaScript](https://frontendmasters.com/courses/javascript-coercion/) by Kyle Simpson\n\n## Learned today\n\n- `typeof function() {}; // \"function\"`, but according to the spec, `function` is **not** defined as type _function_. It is implied it is a **subtype** of `object` type:\n\n  > a function is a callable object\n\n- `undefined` is an empty value, while `null` is an empty _object_ value.\n\n- `typeof foo; // \"undefined\"`\n- `typeof null; // \"object\"` <--- that's a JS bug\n- `NaN` is often meant as \"not a number\", but \"invalid number\" would be closer to the reality\n- `isNaN` has been introduced to guard against errors, before JS got `try .. catch` blocks. Unfortunately, it is a _bit_ unreliable:\n\n  ```javascript\n  isNaN('abc' / 2); // true\n  isNaN('abc'); // true <--- ??????\n  ```\n\n- Newer browsers have `Number.isNan()` which is working as expected. For older browsers you can use the fact that `NaN === NaN` equals to `false` (!!!!) and polyfill it like so:\n\n  ```javascript\n  if (~Number.isNan() {\n    Number.isNaN = function(num) {\n      return num !== num;\n    }\n  })\n  ```\n\n- JS also has a concept of zero and negative zero, and tries to \"hide\" the latter:\n\n  ```javascript\n  0 === -0; // true\n  0 / 3 === 0 / -3; // true\n  ```\n\n- `Object.is()` solves problems with `-0` and `NaN` comparisons:\n\n  ```javascript\n  Object.is('foo', NaN); // false\n  Object.is(NaN, NaN); // true\n  Object.is(0, -0); // false\n  Object.is(-0, -0); // true\n  ```\n\n  - Delcaration of variables does not happen at runtime. JS is compiled first and all declarations are hoisted (moved to the top).\n\n  ```javascript\n  var a = 2;\n  typeof a; // \"number\"\n\n  var a; // just a redeclaration, won't be even there at runtime\n  typeof a; // \"number\" (NOT \"undefined)\n  ```\n\n### Natives\n\nDon't:\n\n```javascript\nlet foo = new Array(1, 2, 3);\nlet bar = new Array(10); // this creates an empty array of length 10!\n\nlet baz = new Object();\nbaz.a = 1;\nbaz.b = 2;\nbaz.c = 3;\n```\n\nDo:\n\n```javascript\nlet foo = [1, 2, 3];\nlet baz = { a: 1, b: 2, c: 3 };\n\nlet date = new Date(); // the only exception, there is no Date literal\n```\n\n### Explicit coercion\n\n#### string <--> number\n\n```javascript\nlet foo = '123';\nlet baz = parseInt(foo, 10); // 123\n\nbaz = Number(foo); // 123\n\n/* + used as a unary operator serves only the purpose\n * of coercing the value to Number */\nbaz = +foo; // 123\n\nbaz = 456;\nfoo = baz.toString(); // '456'\nfoo = String(baz); // '456'\n```\n\n#### X <--> boolean\n\n```javascript\nlet foo = '123';\nlet baz = Boolean(foo); // true\nbaz = !!foo; // true\nbaz = foo ? true : false; // true\n```\n\n## Resources list\n\n## Other resources\n","tags":["javascript","coercion"],"title":"2019-05-23","slug":{"year":"2019","month":"05","day":"23"}},{"content":"\n## Plan for the day\n\n- [ ] Implementation of a calendar-style archive for codelogs\n  - [x] Figure out how to marry Jekyll and vanilla JS\n  - [x] Populate the page with a full calendar using just JS\n  - [x] Add hyperlinks for dates where codelogs exist\n  - [ ] Style everything nicely in CSS, maybe with a dropdown selection for months\n  - [ ] Add buttons for prev / next / show all simplified list, etc.\n\n## Learned today\n\n## Resources list\n\n## Other resources\n","tags":[],"title":"2019-05-27","slug":{"year":"2019","month":"05","day":"27"}},{"content":"\n## Plan for the day\n\n- [x] Finish watching [Coercion in JavaScript](https://frontendmasters.com/courses/javascript-coercion/) by Kyle Simpson\n- [x] Continue watching [JavaScript: From Fundamentals to Functional JS, v2](https://frontendmasters.com/courses/js-fundamentals-functional-v2/) by Bianca Gandolfo\n\n## Learned today\n\n### Implicit coercion\n\nHappens as a side effect of some other operation.\n\n#### string <--> number\n\n`-`, `*` or `/` operators are only defined for numbers, therefor even if both values are strings they are both implicitly coerced into numbers:\n\n```javascript\nlet foo = '123';\nlet baz = foo - 0; // 123\nbaz = foo - '0'; // 123\nbaz = foo / 1; // 123\n```\n\n`+` can be used in two ways: if both values are numbers, it works as a addition operator. If at least one value is a string, it will coerce non-strings into strings and perform a concatenation:\n\n```javascript\nlet foo = '456';\nlet baz = foo + ''; // '456'\nbaz = foo - ''; // 456 <--- ???\n```\n\n#### X <--> boolean\n\n```javascript\nlet foo = '123';\nif (foo) {\n  /* enters here */\n}\n\nfoo = 0;\nif (foo) {\n  /* does not enter here */\n}\nlet baz = foo || 'foo'; // 'foo'\n```\n\nYou should **never** use double equals to compare to a `true` / `false` value:\n\n```javascript\nlet foo = 0;\n/* This does NOT coerce foo to Boolean\n * but 'false' into 0! */\nif (foo == false) {\n  /* enters here */\n}\n```\n\n```javascript\nlet foo = '123';\nif (foo == true) {\n  /* does not enter here */\n}\n```\n\n```javascript\nlet foo = [];\nif (foo) {\n  /* enters here */\n}\nif (foo == false) {\n  /* enters here */\n} // <-- ?????\n```\n\n### Double vs. triple equals\n\n#### NOT TRUE\n\n> `==` checks for value\n> `===` checks for value and type\n\n#### TRUE\n\n> `==` allows coercion\n> `===` does NOT allow coercion\n\n`==` and `===` have exactly the same algorithm if the types match and `==` does indeed check types.\n\n### Destructuring\n\n```javascript\nconst a = [\n  { x: 1, y: 2 },\n  { x: 1, y: 2 },\n];\n```\n\n```javascript\nconst [{ x: firstVariable }, { x: secondVariable }] = a;\n```\n\n### `_.each` / `forEach` loops\n\n`_` comes from [underscore library](https://underscorejs.org/)\n\n```javascript\nconst a = ['x', 'y', 'z'];\n\n_.each(a, function (value, idx) {\n  console.log(value, idx);\n});\n\na.forEach(function (value, idx) {\n  console.log(value, idx);\n});\n```\n\n## Resources list\n\n- [jscoercion.qfox.nl](https://jscoercion.qfox.nl)\n\n## Other resources\n","tags":["javascript","coercion","destructuring","es6","functional programming"],"title":"2019-05-28","slug":{"year":"2019","month":"05","day":"28"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching [JavaScript: From Fundamentals to Functional JS, v2](https://frontendmasters.com/courses/js-fundamentals-functional-v2/) by Bianca Gandolfo\n\n## Learned today\n\n### `_.map()` / `map()`\n\n`_` comes from [underscore library](https://underscorejs.org/)\n\n`map` produces a new array of values by mapping each value in **list** through the transformation function. Each invocation of the iterator is called with _element_, _index_ and _list_ arguments. If list is an object, iterator will be called with _value_, _key_, _list_.\n\n```javascript\nconst a = ['x', 'y', 'z'];\n\n_.map(a, function (value, idx) {\n  console.log(value, idx);\n});\n\na.map(function (value, idx) {\n  console.log(value, idx);\n});\n```\n\n### `map` vs. `forEach`\n\n`forEach` does not return anything, `map` returns an array. In the above examples, `console.log` does not return anything, so `map` will return an array: `[undefined, undefined, undefined]`.\n\n### ES6 arrow vs. regular functions\n\n- Arrow functions do not have their own `this`, they inherit it from the parent.\n- Arrow functions do not have `arguments` keyword.\n- Arrow functions can get confusing especially without an explicit return (\"is it a statement or return?\").\n\n### Spread operator\n\nReturns an array of objects which were not picked up as arguments:\n\n```javascript\nconst logSpreadArgument = (a, b, ...c) => {\n  console.log(a, b, c);\n};\nlogSpreadArgument(1, 2, 3, 4); // 1, 2, [3, 4]\n```\n\n### Arguments keyword\n\nReturns a pseudo-array of all arguments:\n\n```javascript\nconst logArguments = function () {\n  console.log(arguments);\n};\nlogArguments(1, 2, 3, 4); // Arguments { 0: 1, 1: 2, 2: 3, 3: 4 }\nlogArguments(1, 2, 3, ['x', 'y']); // Arguments { 0: 1, 1: 2, 2: 3, 3: ['x', 'y'] }\n```\n\n```javascript\nconst logArgumentsWithError = () => {\n  console.log(arguments);\n};\nlogArgumentsWithError(1, 2, 3, 4); // ReferenceError: arguments is not defined\n```\n\n### Creating arrays\n\nES5:\n\n```javascript\nconst makeArray = function () {\n  return Array.prototype.slice.call(arguments);\n};\n\nmakeArray(1, 2, 3); // [1, 2, 3]\n```\n\nES6:\n\n```javascript\nconst makeAnotherArray = function () {\n  return Array.from(arguments);\n};\n\nmakeAnotherArray(1, 2, 3); // [1, 2, 3]\n```\n\n## Resources list\n\n## Other resources\n","tags":["javascript","functional programming","es6","spread","arrays"],"title":"2019-05-29","slug":{"year":"2019","month":"05","day":"29"}},{"content":"\n## Plan for the day\n\n- [x] Finish watching [JavaScript: From Fundamentals to Functional JS, v2](https://frontendmasters.com/courses/js-fundamentals-functional-v2/) by Bianca Gandolfo\n- [x] Start watching [JavaScript: The Hard Parts](https://frontendmasters.com/courses/javascript-hard-parts/) by Will Sentance\n\n## Learned today\n\n### Higher order functions\n\nThese are functions that operate on other funtions, by taking them as arguments and/or by returning them.\n\n```javascript\nconst ifElse = ({ condition, ifTrue, ifFalse }) => {\n  return condition : ifTrue() ? ifFalse();\n};\n\nifElse({\n  true,\n  () => console.log(true),\n  () => console.log(false)\n})\n```\n\n### `reduce()`\n\n```javascript\n_.reduce([1, 2, 3], (sum, n) => sum + n, 0); // 6\n```\n\n### Closures\n\n```javascript\nconst counter = () => {\n  let n = 0;\n  return {\n    count: () => n + 1;\n    reset: () => n = 0;\n  }\n};\n\nmyCounter = counter();\nmyCounter.count();          // 1\nmyCounter.count();          // 2\nmyCounter.count();          // 3\n\nanotherCounter = counter();\nanotherCounter.count();     // 1\nanotherCounter.count();     // 2\n\nmyCounter.reset();          // 0\nanotherCounter.count();     // 3\n```\n\n### Running / calling / invoking a function\n\nUnless the function is called, JS engine does **not** initialize anything from the function's body.\n\nAs soon as we start executing the code, we create a _global execution context_ consisting of:\n\n- thread of execution,\n- live memory of variables with data (_Global Variable Environment_).\n\nWhen you execute a function you create a new execution context comprising:\n\n- the thread of the execution (we go through the code **in the function** line by line),\n- a local memory, where everything defined in the function is stored.\n\n## Resources list\n\n## Other resources\n","tags":["javascript","functional programming","closures"],"title":"2019-05-30","slug":{"year":"2019","month":"05","day":"30"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching [JavaScript: The Hard Parts](https://frontendmasters.com/courses/javascript-hard-parts/) by Will Sentance\n\n## Learned today\n\n### Call stack\n\nIt' a special data structure (a _stack_) allowing us to track where currently is the thread of execution. First (bottom) level is always the global context. Whatever is on the top of the call stack is the current context for the thread. When the context is gone, it also tells JS engine where it should go back to.\n\nThere is exactly **one** global execution context and **multiple** function contexts.\n\n### Functional programming\n\nCore features:\n\n- pure functions (no side effects, the only consequence is what is returned),\n- higher order functions.\n\nHigher order functions' main principle is to keep _DRY_ (Don't Repeat Yourself) and to allow asynchronous code.\n\n### EXERCISES\n\n1. Function that compares input arrays and returns a new array with elements found in all of the inputs.\n\n   ```javascript\n   function intersection(...arrays) {\n     return reduce(\n       arrays,\n       (array1, array2) => {\n         let result = [];\n         array2.forEach((item) => {\n           if (array1.indexOf(item) !== -1) {\n             result.push(item);\n           }\n         });\n         return result;\n       },\n       arrays[0],\n     );\n   }\n\n   console.log(union([5, 10, 15], [15, 88, 1, 5, 7], [100, 15, 10, 1, 5]));\n   ```\n\n2. Construct a function `objOfMatches` that accepts two arrays and a callback. `objOfMatches` will build an object and return it. To build the object, `objOfMatches` will test each element of the first array using the callback to see if the output matches the corresponding element (by index) of the second array. If there is a match, the element from the first array becomes a key in an object, and the element from the second array becomes the corresponding value.\n\n   ```javascript\n   function objOfMatches(array1, array2, callback) {\n     let result = {};\n     array1.forEach((item, idx) => {\n       if (callback(item) === array2[idx]) {\n         result[item] = array2[idx];\n       }\n     });\n     return result;\n   }\n\n   console.log(\n     objOfMatches(['hi', 'howdy', 'bye', 'later', 'hello'], ['HI', 'Howdy', 'BYE', 'LATER', 'hello'], function (str) {\n       return str.toUpperCase();\n     }),\n   );\n   ```\n\n3. Construct a function `multiMap` that will accept two arrays: an array of values and an array of callbacks. `multiMap` will return an object whose keys match the elements in the array of values. The corresponding values that are assigned to the keys will be arrays consisting of outputs from the array of callbacks, where the input to each callback is the key.\n\n   ```javascript\n   function multiMap(arrVals, arrCallbacks) {\n     let results = {};\n     arrVals.forEach((val) => {\n       results[val] = arrCallbacks.map((cb) => cb(val));\n     });\n     return results;\n   }\n\n   console.log(\n     multiMap(\n       ['catfood', 'glue', 'beer'],\n       [\n         function (str) {\n           return str.toUpperCase();\n         },\n         function (str) {\n           return str[0].toUpperCase() + str.slice(1).toLowerCase();\n         },\n         function (str) {\n           return str + str;\n         },\n       ],\n     ),\n   );\n   ```\n\n## Resources list\n\n## Other resources\n","tags":["functional programming","call stack","javascript"],"title":"2019-05-31","slug":{"year":"2019","month":"05","day":"31"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching [JavaScript: The Hard Parts](https://frontendmasters.com/courses/javascript-hard-parts/) by Will Sentance\n\n## Learned today\n\n### Closures\n\nWhen functions get called, we create a live stote of data (variable environment) for that function's execution context. When it finishes executing, its local memory is deleted (except the returned value).\n\n```javascript\nfunction instructionGenerator() {\n  function multiplyBy2(num) {\n    return num * 2;\n  }\n}\nlet generatedFunc = instructionGenerator();\nlet result = generatedFunc(3); // 6\n```\n\nIn the example above, calling `instructionGenerator` returns a function, which gets assigned into `generatedFunc`. `multiplyBy2` is no longer available under that label, it is accessible under `generatedFunc`.\n\n_Where_ you define your functions determines what variables they will have access to when called.\n\nIf you try to call inner function outside of where it was defined, it **will not** work:\n\n```javascript\nfunction outer() {\n  let counter = 0;\n  function incrementCounter() {\n    counter++;\n  }\n  incrementCounter();\n}\nouter();\nincrementCounter(); // ReferenceError: incrementCounter is not defined\n```\n\nTo keep access to the inner function, you can return it and assign it to a new variable:\n\n```javascript\nfunction outer() {\n  let counter = 0;\n  function incrementCounter() {\n    counter++;\n  }\n  return incrementedCounter;\n}\n\nlet myFunction = outer();\nmyFunction();\n```\n\nAgain, **where (when) you define a function** (not where you call it) determines what variables it has access to when you call it. In the example above, `incrementCounter` had access to `counter` when it was defined. Behind the scenes, `incrementCounter` also got access to all the surrounding data. Returning it returns the function AND the surrounding data (but only data which is needed).\n\n#### Lexical scope\n\nWhen a function is defined, it gets a `[[scope]]` property that references the _Variable Environment_ in which it has been defined. When looking for a variable definition, it first looks in its local scope, then in `[[scope]]` and only after that goes down to scopes from the call stack. This is why JS is called _lexically / statically scoped_.\n\n## Resources list\n\n## Other resources\n","tags":["javascript","closures","scope"],"title":"2019-06-02","slug":{"year":"2019","month":"06","day":"02"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching [JavaScript: The Hard Parts](https://frontendmasters.com/courses/javascript-hard-parts/) by Will Sentance\n\n## Learned today\n\n### Asynchronous JS\n\nThis works as expected, `Hey!` prints first, `Hello` prints at least 1000 ms later.\n\n```javascript\nfunction printHello() {\n  console.log('Hello');\n}\n\nsetTimeout(printHello, 1000);\nconsole.log('Hey!`);\n```\n\nBut this? It also prints `Hey!` first and `Hello` after that, why??\n\n```javascript\nfunction printHello() {\n  console.log('Hello');\n}\n\nsetTimeout(printHello, 0);\nconsole.log('Hey!`);\n```\n\nSo far we've been using the following components:\n\n1. Thread of execution\n2. Variable environment\n3. Call stack\n\nTo understand this, we need to add 3 more components:\n\n1. Web browser APIs / Node background threads\n2. Callback / Message / Task queue\n3. Event loop\n\n#### Browser API\n\nJS is running in an environment which is able to spin up more threads than just one, including setting up a timer. These features are not part of JS, hence we call them APIs.\n\nIn the example above, `setTimeout` does not call `printHello`. It communicates with the browser API telling it to start a timer. After it counts down to 0, it pushes `printHello` to the call stack.\n\n## Resources list\n\n## Other resources\n","tags":["javascript","asynchronism"],"title":"2019-06-03","slug":{"year":"2019","month":"06","day":"03"}},{"content":"\n## Plan for the day\n\n- [x] Add tags to codelogs\n- [x] Deploy a working version of react calc!\n- [ ] Continue watching [JavaScript: The Hard Parts](https://frontendmasters.com/courses/javascript-hard-parts/) by Will Sentance\n\n## Learned today\n\n## Resources list\n\n## Other resources\n","tags":[],"title":"2019-06-04","slug":{"year":"2019","month":"06","day":"04"}},{"content":"\n## Plan for the day\n\n- React calc:\n  - [x] Improve CSS\n  - [x] Add \"C\" functionality to remove last digit\n\n## Learned today\n\n## Resources list\n\n## Other resources\n","tags":[],"title":"2019-06-05","slug":{"year":"2019","month":"06","day":"05"}},{"content":"\n## Plan for the day\n\n- [ ] Continue watching [JavaScript: The Hard Parts](https://frontendmasters.com/courses/javascript-hard-parts/) by Will Sentance\n\n## Learned today\n\n### Callback queue\n\n```javascript\nfunction printHello() {\n  console.log('Hello');\n}\n\nfunction blockFor1Sec() {\n  //\n}\n\nsetTimeout(printHello, 0);\nblockFor1Sec();\nconsole.log('Me first');\n```\n\nIf the engine is busy executing a function (`blockFor1Sec`) and in the meantime `setTimeout`'s timer is done, then `printHello` is going to be added to **callback queue**. Anything in that queue is going to be pushed to call stack once it's **empty** and the global execution context has finished all its tasks (`console.log('Me first)`). And in our example, even though our `setTimeout` timer was set to 0, it was only executed after 1s.\n\nThe process of checking if call stack is ready to get anything from the callback queue and pushing to it is called **event loop**.\n\nThere are many things where waiting would block our thread and we are using browser APIs instead:\n\n- a timer to finish running,\n- new information from server (Ajax),\n- indication that a protion of a page has loaded,\n- user interaction (clicks, mouseovers, etc.),\n- writing / reading to file system (node),\n- writing / reading database (node).\n\n### `XMLHttpRequest`\n\n```javascript\nfunction display(data) {\n  console.log(data.post);\n}\n\n$.get('http://twitter.com/willsen/tweet/1', display);\nconsole.log('Me first');\n```\n\nIn the example above we only log the data, but there is no way to store it / pass into a variable. We could add another function inside `display` which would parse the data, but that leads to callback hell.\n\n## Resources list\n\n## Other resources\n","tags":["javascript","callback"],"title":"2019-06-07","slug":{"year":"2019","month":"06","day":"07"}},{"content":"\n## Plan for the day\n\n- [x] Start another React project\n  - Available here: [Time tracker](https://github.com/msieroslawska/time-tracker)\n\n## Learned today\n\n### Callback queue\n\n## Resources list\n\n## Other resources\n","tags":[],"title":"2019-06-11","slug":{"year":"2019","month":"06","day":"11"}},{"content":"\n## Plan for the day\n\n- [x] Continue setting up [Time tracker](https://github.com/msieroslawska/time-tracker)\n\n## Learned today\n\n### Callback queue\n\n## Resources list\n\n## Other resources\n","tags":[],"title":"2019-06-12","slug":{"year":"2019","month":"06","day":"12"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching [JavaScript: The Hard Parts](https://frontendmasters.com/courses/javascript-hard-parts/) by Will Sentance\n\n## Learned today\n\n### OOP\n\nIs a popular paradigm to structure the code, which:\n\n- makes it easy to add new features and functonalities (we don't have to rewrite stuff to add new features),\n- is efficient in terms of memory,\n- as a clear structure (easy for the author and othe developers).\n\nIf we are operating on some data and there are functionalities we'd like to apply to it, a nice and logical solution would be to store data and methods together in an object (**encapsulate**):\n\n```javascript\nlet user1 = {\n  name: 'Will',\n  score: 6,\n  increment: () => {\n    user1.score++;\n  },\n};\n```\n\nThere are other ways to declare objects:\n\n```javascript\nlet user2 = {};\nuser2.name = 'Jim';\nuser2.score = 10;\nuser2.increment = () => {\n  user2.score++;\n};\n```\n\n```javascript\nlet user3 = Object.create(null);\nuser3.name = 'Jess';\nuser3.score = 2;\nuser3.increment = () => {\n  user3.score++;\n};\n```\n\n#### How do we avoid repeating ourselves?\n\n1. Wrap in a function\n\n```javascript\nfunction userCreator(name, score) {\n  let user = {};\n  user.name = name;\n  user.score = score;\n  user.increment = () => {\n    user.score++;\n  };\n  return user;\n}\n\nlet user1 = userCreator('Will', 6);\nlet user2 = userCreator('Jess', 2);\nuser1.increment();\n```\n\nThis approach has a fundamental flaw: what if we create 1000 users, and `userCreator` has 100 of different functions? Each of 1000 users would be a brand new object with new, separate function definitions. Do we need to allocate all that memory?\n\n2. Use the prototypal nature of JS: when a method is not found in the object, JS looks for it in next object in the prototype chain. In this solution we are storing the common items (functions) in a separate store which we use to populate `userCreator`:\n\n```javascript\nfunction userCreator(name, score) {\n  let user = Object.create(userFunctionStore);\n  user.name = name;\n  user.score = score;\n  return user;\n}\n\nfunction userFunctionStore() {\n  increment: () => { this.score++; },\n  login: () => { console.log('You\\'re logged in!'); },\n}\n\nlet user1 = userCreator('Will', 6);\nuser1.increment();\n```\n\n`Object.create()` always returns an empty object. What is being passed as an argument is being stored as a reference in `user`'s `__proto__` property (creating a **prototype chain bond** ). What is being stored in `user1` (what is returned from `userCreator()`) does **not** have `increment()` and `login()`.\n\n## Resources list\n\n## Other resources\n","tags":["javascript","oop"],"title":"2019-06-13","slug":{"year":"2019","month":"06","day":"13"}},{"content":"\nBesides working on [bigger projects](../../projects/) I have also decided to start small and slow with HackerRank challenges. I created a [separate repo](https://github.com/msieroslawska/coding-problems) where I'm going to be adding all my solutions.\n","tags":["javascript","hackerrank"],"title":"2019-06-17","slug":{"year":"2019","month":"06","day":"17"}},{"content":"\nToday I can pat myself on the shoulder, I did good :)\n\nI have started checking the job market to see what is there and how I'm doing. I'm already getting first bites (and rejections too :)). Today is a holiday and I spent most of the day working on the coding challenges I've been sent. Obviously I'm not going to drop any names or exact ideas what they were about, but just as a note to myself:\n\n1. At the first glance all challenges are **always** going to look overwhelming. That's normal. Just stay calm and read the description. And again. And again. Don't touch the code until you really understand what the task is about. If it's an offline challenge, don't hesitate to ask questions. If it's online (and timed), just read it again. Take notes.\n2. **SERIOUSLY**, **K**eep **I**t **S**imple, **S**tupid (KISS). Don't go the pathway of \"my solution is not robust and universal enough\". If it works, it works. Obviously, don't produce half-assed code either. Just stick to the simplest solution and jump to another task. If you're left with extra time, go back, save the simple (working) solution and **only then** start implementing more magic. There are high chances that magic is gonna end up nowhere. It's okay, experimenting is great. But not when you need results within certain time :)\n3. I think this should be obvious, but I know myself :) There is no point staying up late. Let yourself rest even if you have the flow and so many ideas to try. Your brain is going to work so much better fresh in the morning.\n4. On the same note, take breaks. Go for a walk. Get some coffee. Take a shower. You'd be suprised how many ideas you get when your brain runs on idle :)\n5. What helped me in the past: write on a piece of paper \"BREATHE, YOU'RE GONNA NAIL IT\" and put it next to the keyboard. Helps with coding **and** online interviews!\n\nToday I learned I can do jQuery :D\n","tags":["javascript","react","jquery","jobhunt"],"title":"2019-06-20","slug":{"year":"2019","month":"06","day":"20"}},{"content":"\nI've been focusing recently on HackerRank challenges and filling up my [challenges repository](https://github.com/msieroslawska/coding-problems). I feel it's redundant to write both here in Codelogs and in the challenge description file, hence the break in my Codelogs calendar.\n\nI've been pointed to another [challenge resource](http://codekata.com/) and today I started working on a different approach. I'm working on implementing binary search using different approaches **and** running unit tests at the same time. So far I have a working test setup (with failing tests! TDD FTW!) and some basic code.\n\nOne issue (error) I have encountered so far is calculating the division index for arrays with odd number of elements. I forgot index has to be an integer and it's necessary to round up the division result:\n\n```javascript\nconst dividerIdx = arr.length % 2 === 0 ? arr.length / 2 : Math.floor(arr.length / 2) + 1;\n```\n","tags":["javascript","testing","node"],"title":"2019-06-26","slug":{"year":"2019","month":"06","day":"26"}},{"content":"\n## Plan for the day\n\n- [ ] Continue watching [JavaScript: The Hard Parts](https://frontendmasters.com/courses/javascript-hard-parts/) by Will Sentance\n- [x] Style codelog calendar a bit nicer\n\n## Learned today\n\n## Resources list\n\n## Other resources\n","tags":["javascript","css"],"title":"2019-07-02","slug":{"year":"2019","month":"07","day":"02"}},{"content":"\n## Plan for the day\n\n- [x] Continue watching [JavaScript: The Hard Parts](https://frontendmasters.com/courses/javascript-hard-parts/) by Will Sentance\n- [x] Start watching [Getting Started with JavaScript, v2](https://frontendmasters.com/courses/getting-started-javascript-v2/) by Kyle Simpson\n\n## Learned today\n\n### How do we avoid repeating ourselves? (c.d.)\n\n3. `new` operator\n\n```javascript\nfunction userCreator(name, score) {\n  this.name = name;\n  this.score = score;\n}\n\nuserCreator.prototype; // {}\nuserCreator.prototype.increment = function () {\n  this.score++;\n};\n\nlet user1 = userCreator('Will', 6);\n```\n\nUsing **new** automates 2 things: creating a new object and returning it. The new object does not have a custom label anymore. Instead, it is referred to as **this**.\n\nIt also creates a bond to `UserCreator`'s `prototype` where it stores all the shared properties (instead of `userFunctionStore` from previous examples).\n\nJS functions are just objects with an extra `call` method being invoked when a function is called.\n\n```javascript\nfunction User(name, score) {\n  this.name = name;\n  this.score = score;\n}\n\nUser.prototype.increment = function () {\n  this.score++;\n};\n\nUser.prototype.login = function () {\n  console.log('Login');\n};\n\nlet user = new User('Eva', 10);\nuser.increment();\n```\n\n1. `new` creates an empty object and assigns it to a label `this`.\n2. `__proto__` from `this` is linked to `User.prototype`.\n3. There is no need for explicit return, `new` returns object labeled as `this`.\n\nIf we call `User` without `new` it will not work. `this` will be pointing to the global object. As this syntax looks just like another function, it's easy to forget that it requires `new`.\n\n4. `Class` syntactic sugar\n\nSolution 3 does not allow the following syntax:\n\n```javascript\nfunction User(name, score) {\n  this.name = name;\n  this.score = score;\n  this.increment = function () {\n    this.score++;\n  };\n}\n```\n\nBy using `Class` we can introduce a _constructor_ which will be a collection of all the methods and properties.\n\n```javascript\nclass User {\n  constructor(name, score) {\n    this.name = name;\n    this.score = score;\n  }\n\n  increment() {\n    this.score++;\n  }\n\n  login() {\n    console.log('Login');\n  }\n}\n\nlet user = new User('John', 14);\nuser.increment();\n```\n\n## Resources list\n\n## Other resources\n","tags":["javascript","css"],"title":"2019-07-03","slug":{"year":"2019","month":"07","day":"03"}},{"content":"\n## Plan for the day\n\n- [x] Finish watching [Getting Started with JavaScript, v2](https://frontendmasters.com/courses/getting-started-javascript-v2/) by Kyle Simpson\n- [x] Start watching [Deep JavaScript Foundations, v3](https://frontendmasters.com/courses/deep-javascript-v3/) by Kyle Simpson\n\n## Learned today\n\n```javascript\nlet x = 42;\nx++; // 42\nx; // 43\n\n++x; // 44\nx; // 44\n```\n\n## Resources list\n\n## Other resources\n","tags":["javascript"],"title":"2019-07-08","slug":{"year":"2019","month":"07","day":"08"}}]},"__N_SSG":true}