{"pageProps":{"codelog":{"tags":["javascript","coercion"],"title":"2019-05-23","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Start watching <a href=\"https://frontendmasters.com/courses/javascript-coercion/\">Coercion in JavaScript</a> by Kyle Simpson</li>\n</ul>\n<h2>Learned today</h2>\n<ul>\n<li>\n<p><code>typeof function() {}; // \"function\"</code>, but according to the spec, <code>function</code> is <strong>not</strong> defined as type <em>function</em>. It is implied it is a <strong>subtype</strong> of <code>object</code> type:</p>\n<blockquote>\n<p>a function is a callable object</p>\n</blockquote>\n</li>\n<li>\n<p><code>undefined</code> is an empty value, while <code>null</code> is an empty <em>object</em> value.</p>\n</li>\n<li>\n<p><code>typeof foo; // \"undefined\"</code></p>\n</li>\n<li>\n<p><code>typeof null; // \"object\"</code> &#x3C;--- that's a JS bug</p>\n</li>\n<li>\n<p><code>NaN</code> is often meant as \"not a number\", but \"invalid number\" would be closer to the reality</p>\n</li>\n<li>\n<p><code>isNaN</code> has been introduced to guard against errors, before JS got <code>try .. catch</code> blocks. Unfortunately, it is a <em>bit</em> unreliable:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-string\">'abc'</span> / <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-string\">'abc'</span>); <span class=\"hljs-comment\">// true &#x3C;--- ??????</span></code></pre>\n</li>\n<li>\n<p>Newer browsers have <code>Number.isNan()</code> which is working as expected. For older browsers you can use the fact that <code>NaN === NaN</code> equals to <code>false</code> (!!!!) and polyfill it like so:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (~<span class=\"hljs-built_in\">Number</span>.isNan() {\n  <span class=\"hljs-built_in\">Number</span>.isNaN = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> num !== num;\n  }\n})</code></pre>\n</li>\n<li>\n<p>JS also has a concept of zero and negative zero, and tries to \"hide\" the latter:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-number\">0</span> === <span class=\"hljs-number\">-0</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-number\">0</span> / <span class=\"hljs-number\">3</span> === <span class=\"hljs-number\">0</span> / <span class=\"hljs-number\">-3</span>; <span class=\"hljs-comment\">// true</span></code></pre>\n</li>\n<li>\n<p><code>Object.is()</code> solves problems with <code>-0</code> and <code>NaN</code> comparisons:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">Object</span>.is(<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">Object</span>.is(<span class=\"hljs-literal\">NaN</span>, <span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">Object</span>.is(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-0</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">Object</span>.is(<span class=\"hljs-number\">-0</span>, <span class=\"hljs-number\">-0</span>); <span class=\"hljs-comment\">// true</span></code></pre>\n<ul>\n<li>Delcaration of variables does not happen at runtime. JS is compiled first and all declarations are hoisted (moved to the top).</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">typeof</span> a; <span class=\"hljs-comment\">// \"number\"</span>\n\n<span class=\"hljs-keyword\">var</span> a; <span class=\"hljs-comment\">// just a redeclaration, won't be even there at runtime</span>\n<span class=\"hljs-keyword\">typeof</span> a; <span class=\"hljs-comment\">// \"number\" (NOT \"undefined)</span></code></pre>\n</li>\n</ul>\n<h3>Natives</h3>\n<p>Don't:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">let</span> bar = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// this creates an empty array of length 10!</span>\n\n<span class=\"hljs-keyword\">let</span> baz = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();\nbaz.a = <span class=\"hljs-number\">1</span>;\nbaz.b = <span class=\"hljs-number\">2</span>;\nbaz.c = <span class=\"hljs-number\">3</span>;</code></pre>\n<p>Do:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> baz = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> };\n\n<span class=\"hljs-keyword\">let</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(); <span class=\"hljs-comment\">// the only exception, there is no Date literal</span></code></pre>\n<h3>Explicit coercion</h3>\n<h4>string &#x3C;--> number</h4>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-string\">'123'</span>;\n<span class=\"hljs-keyword\">let</span> baz = <span class=\"hljs-built_in\">parseInt</span>(foo, <span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 123</span>\n\nbaz = <span class=\"hljs-built_in\">Number</span>(foo); <span class=\"hljs-comment\">// 123</span>\n\n<span class=\"hljs-comment\">/* + used as a unary operator serves only the purpose\n * of coercing the value to Number */</span>\nbaz = +foo; <span class=\"hljs-comment\">// 123</span>\n\nbaz = <span class=\"hljs-number\">456</span>;\nfoo = baz.toString(); <span class=\"hljs-comment\">// '456'</span>\nfoo = <span class=\"hljs-built_in\">String</span>(baz); <span class=\"hljs-comment\">// '456'</span></code></pre>\n<h4>X &#x3C;--> boolean</h4>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-string\">'123'</span>;\n<span class=\"hljs-keyword\">let</span> baz = <span class=\"hljs-built_in\">Boolean</span>(foo); <span class=\"hljs-comment\">// true</span>\nbaz = !!foo; <span class=\"hljs-comment\">// true</span>\nbaz = foo ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// true</span></code></pre>\n<h2>Resources list</h2>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}