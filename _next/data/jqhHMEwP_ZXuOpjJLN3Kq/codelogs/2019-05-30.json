{"pageProps":{"codelog":{"tags":["javascript","functional programming","closures"],"title":"2019-05-30","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Finish watching <a href=\"https://frontendmasters.com/courses/js-fundamentals-functional-v2/\">JavaScript: From Fundamentals to Functional JS, v2</a> by Bianca Gandolfo</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Start watching <a href=\"https://frontendmasters.com/courses/javascript-hard-parts/\">JavaScript: The Hard Parts</a> by Will Sentance</li>\n</ul>\n<h2>Learned today</h2>\n<h3>Higher order functions</h3>\n<p>These are functions that operate on other funtions, by taking them as arguments and/or by returning them.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> ifElse = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ condition, ifTrue, ifFalse }</span>) =></span> {\n  <span class=\"hljs-keyword\">return</span> condition : ifTrue() ? ifFalse();\n};\n\nifElse({\n  <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">true</span>),\n  <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">false</span>)\n})</code></pre>\n<h3><code>reduce()</code></h3>\n<pre><code class=\"hljs language-javascript\">_.reduce([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-function\">(<span class=\"hljs-params\">sum, n</span>) =></span> sum + n, <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// 6</span></code></pre>\n<h3>Closures</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">let</span> n = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-function\">() =></span> n + <span class=\"hljs-number\">1</span>;\n    reset: <span class=\"hljs-function\">() =></span> n = <span class=\"hljs-number\">0</span>;\n  }\n};\n\nmyCounter = counter();\nmyCounter.count();          <span class=\"hljs-comment\">// 1</span>\nmyCounter.count();          <span class=\"hljs-comment\">// 2</span>\nmyCounter.count();          <span class=\"hljs-comment\">// 3</span>\n\nanotherCounter = counter();\nanotherCounter.count();     <span class=\"hljs-comment\">// 1</span>\nanotherCounter.count();     <span class=\"hljs-comment\">// 2</span>\n\nmyCounter.reset();          <span class=\"hljs-comment\">// 0</span>\nanotherCounter.count();     <span class=\"hljs-comment\">// 3</span></code></pre>\n<h3>Running / calling / invoking a function</h3>\n<p>Unless the function is called, JS engine does <strong>not</strong> initialize anything from the function's body.</p>\n<p>As soon as we start executing the code, we create a <em>global execution context</em> consisting of:</p>\n<ul>\n<li>thread of execution,</li>\n<li>live memory of variables with data (<em>Global Variable Environment</em>).</li>\n</ul>\n<p>When you execute a function you create a new execution context comprising:</p>\n<ul>\n<li>the thread of the execution (we go through the code <strong>in the function</strong> line by line),</li>\n<li>a local memory, where everything defined in the function is stored.</li>\n</ul>\n<h2>Resources list</h2>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}