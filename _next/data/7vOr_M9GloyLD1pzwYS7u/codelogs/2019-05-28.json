{"pageProps":{"codelog":{"tags":["javascript","coercion","destructuring","es6","functional programming"],"title":"2019-05-28","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Finish watching <a href=\"https://frontendmasters.com/courses/javascript-coercion/\">Coercion in JavaScript</a> by Kyle Simpson</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Continue watching <a href=\"https://frontendmasters.com/courses/js-fundamentals-functional-v2/\">JavaScript: From Fundamentals to Functional JS, v2</a> by Bianca Gandolfo</li>\n</ul>\n<h2>Learned today</h2>\n<h3>Implicit coercion</h3>\n<p>Happens as a side effect of some other operation.</p>\n<h4>string &#x3C;--> number</h4>\n<p><code>-</code>, <code>*</code> or <code>/</code> operators are only defined for numbers, therefor even if both values are strings they are both implicitly coerced into numbers:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-string\">'123'</span>;\n<span class=\"hljs-keyword\">let</span> baz = foo - <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 123</span>\nbaz = foo - <span class=\"hljs-string\">'0'</span>; <span class=\"hljs-comment\">// 123</span>\nbaz = foo / <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 123</span></code></pre>\n<p><code>+</code> can be used in two ways: if both values are numbers, it works as a addition operator. If at least one value is a string, it will coerce non-strings into strings and perform a concatenation:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-string\">'456'</span>;\n<span class=\"hljs-keyword\">let</span> baz = foo + <span class=\"hljs-string\">''</span>; <span class=\"hljs-comment\">// '456'</span>\nbaz = foo - <span class=\"hljs-string\">''</span>; <span class=\"hljs-comment\">// 456 &#x3C;--- ???</span></code></pre>\n<h4>X &#x3C;--> boolean</h4>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-string\">'123'</span>;\n<span class=\"hljs-keyword\">if</span> (foo) {\n  <span class=\"hljs-comment\">/* enters here */</span>\n}\n\nfoo = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">if</span> (foo) {\n  <span class=\"hljs-comment\">/* does not enter here */</span>\n}\n<span class=\"hljs-keyword\">let</span> baz = foo || <span class=\"hljs-string\">'foo'</span>; <span class=\"hljs-comment\">// 'foo'</span></code></pre>\n<p>You should <strong>never</strong> use double equals to compare to a <code>true</code> / <code>false</code> value:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-comment\">/* This does NOT coerce foo to Boolean\n * but 'false' into 0! */</span>\n<span class=\"hljs-keyword\">if</span> (foo == <span class=\"hljs-literal\">false</span>) {\n  <span class=\"hljs-comment\">/* enters here */</span>\n}</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-string\">'123'</span>;\n<span class=\"hljs-keyword\">if</span> (foo == <span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-comment\">/* does not enter here */</span>\n}</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> foo = [];\n<span class=\"hljs-keyword\">if</span> (foo) {\n  <span class=\"hljs-comment\">/* enters here */</span>\n}\n<span class=\"hljs-keyword\">if</span> (foo == <span class=\"hljs-literal\">false</span>) {\n  <span class=\"hljs-comment\">/* enters here */</span>\n} <span class=\"hljs-comment\">// &#x3C;-- ?????</span></code></pre>\n<h3>Double vs. triple equals</h3>\n<h4>NOT TRUE</h4>\n<blockquote>\n<p><code>==</code> checks for value\n<code>===</code> checks for value and type</p>\n</blockquote>\n<h4>TRUE</h4>\n<blockquote>\n<p><code>==</code> allows coercion\n<code>===</code> does NOT allow coercion</p>\n</blockquote>\n<p><code>==</code> and <code>===</code> have exactly the same algorithm if the types match and <code>==</code> does indeed check types.</p>\n<h3>Destructuring</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> a = [\n  { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span> },\n  { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span> },\n];</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> [{ <span class=\"hljs-attr\">x</span>: firstVariable }, { <span class=\"hljs-attr\">x</span>: secondVariable }] = a;</code></pre>\n<h3><code>_.each</code> / <code>forEach</code> loops</h3>\n<p><code>_</code> comes from <a href=\"https://underscorejs.org/\">underscore library</a></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'z'</span>];\n\n_.each(a, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, idx</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(value, idx);\n});\n\na.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, idx</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(value, idx);\n});</code></pre>\n<h2>Resources list</h2>\n<ul>\n<li><a href=\"https://jscoercion.qfox.nl\">jscoercion.qfox.nl</a></li>\n</ul>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}