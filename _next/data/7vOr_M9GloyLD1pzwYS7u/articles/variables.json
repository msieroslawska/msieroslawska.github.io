{"pageProps":{"article":{"title":"[What a Frontend Engineer should know] Keywords: var, let, const; scoping and hoisting","content":"<p><em>This is a part of larger series I am writing as answers to <a href=\"https://solutionchaser.com/rekrutacja-na-front-end-developera-porady-pytania/\">these questions (PL)</a> posted as preparation for an interview as a frontend engineer.</em></p>\n<hr>\n<p><code>const</code> stands for <em>constant</em> meaning that once declared, a constant variable cannot be reassigned.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-literal\">true</span>;\nc = <span class=\"hljs-string\">'test'</span>; <span class=\"hljs-comment\">// TypeError: invalid assignment to const 'c'</span></code></pre>\n<p><code>var</code> and <code>let</code> behave the same in terms of assigning a value: declare the variable once and you can reassign to it later as many times as you wish.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\na = <span class=\"hljs-string\">'test'</span>;\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">2</span>;\na = <span class=\"hljs-literal\">true</span>;\nb = <span class=\"hljs-number\">1</span>;</code></pre>\n<p>That is where similarities between <code>var</code> and <code>let</code> ends.</p>\n<h2>Scoping</h2>\n<h3><code>var</code> is scoped to the nearest function block</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">varTest</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-keyword\">if</span> (a) {\n    <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">'test'</span>;\n  }\n\n  <span class=\"hljs-built_in\">console</span>.log(b); <span class=\"hljs-comment\">// 'test'</span>\n}</code></pre>\n<h3><code>let</code> is scoped to the nearest enclosing block</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">letTest</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-keyword\">if</span> (a) {\n    <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-string\">'test'</span>;\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">1</span>; i++) {\n    <span class=\"hljs-built_in\">console</span>.log(i); <span class=\"hljs-comment\">// 0</span>\n  }\n\n  <span class=\"hljs-built_in\">console</span>.log(b); <span class=\"hljs-comment\">// ReferenceError: b is not defined</span>\n  <span class=\"hljs-built_in\">console</span>.log(i); <span class=\"hljs-comment\">// ReferenceError: i is not defined</span>\n}</code></pre>\n<p>A more complicated example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-string\">'blue'</span>;\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">'green'</span>;\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-string\">'red'</span>; <span class=\"hljs-comment\">// local variable</span>\n  <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">'black'</span>; <span class=\"hljs-comment\">// global variable</span>\n\n  <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">// 'red'</span>\n  <span class=\"hljs-built_in\">console</span>.log(b); <span class=\"hljs-comment\">// 'black'</span>\n}\n\n<span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">// 'blue'</span>\n<span class=\"hljs-built_in\">console</span>.log(b); <span class=\"hljs-comment\">// 'black'</span></code></pre>\n<h3><code>var</code> adds to the global scope</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.a); <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.b); <span class=\"hljs-comment\">// undefined</span></code></pre>\n<h2>Hoisting</h2>\n<p>Fact 1: JavaScript initializes all variable as <code>undefined</code>.</p>\n<p>Fact 2: <code>var</code> variables are <em>hoisted</em>. It means their declaration is moved to the top of the current scope.</p>\n<p>This is why the following code executes without issues:</p>\n<pre><code class=\"hljs language-javascript\">x = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> x;\n<span class=\"hljs-built_in\">console</span>.log(x); <span class=\"hljs-comment\">// 2</span></code></pre>\n<p>Please note that only variable <strong>declaration</strong> is moved, not assignment:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> x;\n<span class=\"hljs-built_in\">console</span>.log(x); <span class=\"hljs-comment\">// undefined</span>\nx = <span class=\"hljs-number\">2</span>;</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console</span>.log(x); <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">2</span>;</code></pre>\n<p>Fact 3: <code>let</code> and <code>const</code> variables are <strong>NOT hoisted</strong>.</p>\n<pre><code class=\"hljs language-javascript\">x = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// ReferenceError: can't access lexical declaration `x' before initialization</span>\n<span class=\"hljs-keyword\">let</span> x;\n<span class=\"hljs-built_in\">console</span>.log(x);</code></pre>\n<h2>Conclusion: why?</h2>\n<ul>\n<li>It is always a good idea to avoid using global scope whenever possible.</li>\n<li>Using <code>let</code> instead of <code>var</code> eliminates possible bugs coming from accidental variable overriding.</li>\n<li>Assume <code>const</code> as default for your variables. Use <code>let</code> only in cases you need to reassign it.</li>\n<li>If you have to use <code>var</code>, declare it always at the top of the scope. Hoisting can lead to weird bugs.</li>\n</ul>\n<p>Just forget about <code>var</code> for your own good :)!</p>\n<h2>Sources</h2>\n<ul>\n<li><a href=\"https://hackernoon.com/heres-the-difference-between-let-and-var-in-javascript-83d8864b74c0\">hackernoon.com</a></li>\n<li><a href=\"https://www.w3schools.com/js/js_hoisting.asp\">www.w3schools.com</a></li>\n</ul>\n"}},"__N_SSG":true}