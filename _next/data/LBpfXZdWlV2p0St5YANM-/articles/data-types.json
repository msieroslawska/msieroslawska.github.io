{"pageProps":{"article":{"title":"[What a Frontend Engineer should know] Data types; primitive and complex types","content":"<p><em>This is a part of larger series I am writing as answers to <a href=\"https://solutionchaser.com/rekrutacja-na-front-end-developera-porady-pytania/\">these questions (PL)</a> posted as preparation for an interview as a frontend engineer.</em></p>\n<hr>\n<p>JavaScript is <em>dynamically typed</em> programming language, meaning that the same variable can contain different data types.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-string\">'a'</span>; <span class=\"hljs-comment\">// String</span>\nx = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Number</span>\nx = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Boolean</span></code></pre>\n<p>ECMAScript defines 8 data types:</p>\n<ol>\n<li><code>String</code></li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>Symbol</code></li>\n<li><code>BigInt</code></li>\n<li><code>Undefined</code></li>\n<li><code>Null</code></li>\n<li><code>Object</code></li>\n</ol>\n<h2>Primitive data types</h2>\n<p><code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Symbol</code>, <code>BigInt</code>, <code>Undefined</code> and <code>Null</code> are <strong>primitive</strong> data types. They are <em>immutable</em> (cannot be changed) and have no methods:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-string\">'Jane'</span>;\n<span class=\"hljs-keyword\">let</span> anotherPerson = person;\nanotherPerson = <span class=\"hljs-string\">'Jenny'</span>;\n<span class=\"hljs-built_in\">console</span>.log(person); <span class=\"hljs-comment\">// 'Jane'</span>\n<span class=\"hljs-built_in\">console</span>.log(anotherPerson); <span class=\"hljs-comment\">// 'Jenny'</span>\n<span class=\"hljs-built_in\">console</span>.log(person === anotherPerson); <span class=\"hljs-comment\">// false;</span></code></pre>\n<h3><code>String</code></h3>\n<p>Used to represent textual data contained in single- <code>'</code> and double quotes <code>\"</code> (and backticks <code>`</code> which are a special use case). Each element in <code>String</code> has a position, where first one is at position (index) 0. Total length of a <code>String</code> is the number of elements in it.</p>\n<h3><code>Number</code></h3>\n<p>It is one of built-in numeric types (second one being <code>BigInt</code>) representing numbers between -2<sup>53</sup>-1 and 2<sup>53</sup>-1 (both for <em>integer</em> and <em>floating point</em>).</p>\n<p>Besides regular numbers, there are also <em>special numerical values</em>:</p>\n<ul>\n<li><code>+Infinity</code>,</li>\n<li><code>-Infinity</code>,</li>\n<li><code>NaN</code> (not a number).</li>\n</ul>\n<p>To check the minimum / maximum available number between <code>-Infinity</code> and <code>+Infinity</code> you can use constants <code>Number.MIN_VALUE</code> and <code>Number.MAX_VALUE</code> respectively. ECMAScript2015 has also introduced <code>Number.isSafeInteger()</code> for checks if a number is in the double-precision floating-point number range, and <code>Number.MIN_SAFE_INTEGER</code> / <code>Number.MAX_SAFE_INTEGER</code>. Beyond this range, integers are not safe anymore and will be a double-precision floating point approximation of the value.</p>\n<h3><code>Boolean</code></h3>\n<p>Represents a logical entity and can have two values: <code>true</code>, and <code>false</code>.</p>\n<h3><code>Symbol</code></h3>\n<p>A <code>Symbol</code> is a unique and immutable primitive value and may be used as the key of an <code>Object</code> property. It is created by using a constructor:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> id = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'description'</span>);</code></pre>\n<p>Symbols are guaranteed to be unique. Even if we create many symbols with the same description, they are different values. The description is just a label that doesnâ€™t affect anything.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> id1 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'description'</span>);\n<span class=\"hljs-keyword\">const</span> id2 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'description'</span>);\n<span class=\"hljs-built_in\">console</span>.log(id1 == id2); <span class=\"hljs-comment\">// false</span></code></pre>\n<p>Symbols <strong>do not</strong> auto-convert to strings!</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> id = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'id'</span>);\n<span class=\"hljs-built_in\">console</span>.log(id); <span class=\"hljs-comment\">// TypeError: Cannot convert a Symbol value to a string</span></code></pre>\n<h3><code>BigInt</code></h3>\n<p>Is an extention to <code>Number</code> which allows storing and operating on large integers beyond <code>Number.MIN_SAFE_INTEGER</code> and <code>Number.MAX_SAFE_INTEGER</code>. A <code>BigInt</code> is created by appending <em>n</em> to the end of the integer or by calling the constructor.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">2n</span> ** <span class=\"hljs-number\">53n</span> + <span class=\"hljs-number\">1n</span>; <span class=\"hljs-comment\">// 9007199254740993n</span></code></pre>\n<p>A <code>BigInt</code> behaves like a <code>Number</code> in cases where it is converted to Boolean: <code>if</code>, <code>||</code>, <code>&#x26;&#x26;</code>, <code>Boolean</code>, <code>!</code>.</p>\n<h3><code>Undefined</code></h3>\n<p>A variable that has not been assigned a value has the value <code>undefined</code>.</p>\n<h3><code>Null</code></h3>\n<p>The Null type has exactly one value: <code>null</code>.</p>\n<h2><code>Object</code></h2>\n<p>JavaScript objects are collections of named values called <em>properties</em>. They can be both primitive values, other objects or functions (methods).</p>\n<h3>Creating objects</h3>\n<h4>Using an Object literal</h4>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span> };</code></pre>\n<h4>Using a constructor</h4>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();\nperson.firstName = <span class=\"hljs-string\">'Jane'</span>;\nperson.lastName: <span class=\"hljs-string\">'Doe'</span>;\nperson.age: <span class=\"hljs-number\">23</span>;</code></pre>\n<h3>Accessing object properties</h3>\n<p>An object property name can be any valid JavaScript string, or anything that can be converted to a string, including the empty string. However, any property name that is not a valid JavaScript identifier (for example, a property name that has a space or a hyphen, or that starts with a number) can only be accessed using the square bracket notation.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span> };\n<span class=\"hljs-built_in\">console</span>.log(person.age); <span class=\"hljs-comment\">// 23</span></code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span> };\n<span class=\"hljs-built_in\">console</span>.log(person[<span class=\"hljs-string\">'age'</span>]); <span class=\"hljs-comment\">// 23</span></code></pre>\n<p>It's also possible to use bracket notation to access a property using another variable:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span> };\n<span class=\"hljs-keyword\">const</span> propertyName = <span class=\"hljs-string\">'age'</span>;\n<span class=\"hljs-built_in\">console</span>.log(person[propertyName]); <span class=\"hljs-comment\">// 23</span></code></pre>\n<h3>Enumerating Object properties</h3>\n<h4><code>Object.keys(...)</code></h4>\n<p>Returns an array of all <em>own enumerable</em> properties:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> id = <span class=\"hljs-built_in\">Symbol</span>();\n<span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span>, [id]: <span class=\"hljs-number\">123</span> };\n<span class=\"hljs-built_in\">Object</span>.keys(person); <span class=\"hljs-comment\">// ['firstName', 'lastName', 'age']</span></code></pre>\n<h4><code>Object.getOwnPropertyNames(...)</code></h4>\n<p>Returns an array of all <em>own</em> properties:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> id = <span class=\"hljs-built_in\">Symbol</span>();\n<span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span>, [id]: <span class=\"hljs-number\">123</span> };\n<span class=\"hljs-keyword\">const</span> child = { <span class=\"hljs-attr\">mature</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">__proto__</span>: person };\n<span class=\"hljs-built_in\">Object</span>.getOwnPropertyNames(person); <span class=\"hljs-comment\">// ['firstName', 'lastName', 'age']</span>\n<span class=\"hljs-built_in\">Object</span>.getOwnPropertyNames(child); <span class=\"hljs-comment\">// ['mature']</span></code></pre>\n<h4><code>for...in</code> loops</h4>\n<p>Returns all <em>own and inherited</em> properties:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> id = <span class=\"hljs-built_in\">Symbol</span>();\n<span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span>, [id]: <span class=\"hljs-number\">123</span> };\n<span class=\"hljs-keyword\">const</span> child = { <span class=\"hljs-attr\">mature</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">__proto__</span>: person };\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> p <span class=\"hljs-keyword\">in</span> person) {\n  <span class=\"hljs-built_in\">console</span>.log(p);\n} <span class=\"hljs-comment\">// 'fistName', 'lastName', 'age'</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> c <span class=\"hljs-keyword\">in</span> child) {\n  <span class=\"hljs-built_in\">console</span>.log(c);\n} <span class=\"hljs-comment\">// 'mature', fistName', 'lastName', 'age'</span></code></pre>\n<h3>Objects are mutable</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span> };\n<span class=\"hljs-keyword\">const</span> anotherPerson = person;\nanotherPerson.firstName = <span class=\"hljs-string\">'Jenny'</span>;</code></pre>\n<p>In the example above, <code>anotherPerson</code> is not a copy of <code>person</code>, it <strong>is</strong> <code>person</code> (it stores not <em>value</em>, but <em>reference</em> to an object). Therefore modifying its property is in reality modifying also <code>person</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console</span>.log(person); <span class=\"hljs-comment\">// Object { firstName: \"Jenny\", lastName: \"Doe\", age: 23 }</span>\n<span class=\"hljs-built_in\">console</span>.log(anotherPerson); <span class=\"hljs-comment\">// Object { firstName: \"Jenny\", lastName: \"Doe\", age: 23 }</span>\n<span class=\"hljs-built_in\">console</span>.log(person === anotherPerson); <span class=\"hljs-comment\">// true;</span></code></pre>\n<h3>Existence check</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span> };\n<span class=\"hljs-built_in\">console</span>.log(person.firstName === <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(person.mature === <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span></code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span> };\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'firstName'</span> <span class=\"hljs-keyword\">in</span> person); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'mature'</span> <span class=\"hljs-keyword\">in</span> person); <span class=\"hljs-comment\">// false</span></code></pre>\n<h2>Combining different data types</h2>\n<p><code>operand + operand = result</code></p>\n<ol>\n<li>If at least one of the operands is an <code>Object</code>, convert it to a primitive.</li>\n<li>If at least one of the converted operands is a <code>String</code>, convert other operands also to <code>String</code> and concatenate.</li>\n<li>Otherwise convert all operands to <code>Number</code> and do the math.</li>\n</ol>\n<h3><code>String</code> + <code>Number</code> = <code>String</code></h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">1</span> + <span class=\"hljs-string\">'abc'</span>; <span class=\"hljs-comment\">// String: '1abc'</span></code></pre>\n<p>JavaScript evaluates expressions from left to right, compare:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> + <span class=\"hljs-string\">'abc'</span>; <span class=\"hljs-comment\">// String: '3abc'</span></code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-string\">'abc'</span> + <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// String: 'abc12'</span></code></pre>\n<h3><code>Object</code> + <code>String</code> = <code>String</code></h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> x = [<span class=\"hljs-string\">'1'</span>] + <span class=\"hljs-string\">'a'</span>; <span class=\"hljs-comment\">// String: '1a'</span>\n<span class=\"hljs-keyword\">let</span> x = [<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">'a'</span>; <span class=\"hljs-comment\">// String: '1a'</span></code></pre>\n<h3><code>Object</code> + <code>Number</code> = <code>String</code></h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> x = [<span class=\"hljs-string\">'1'</span>] + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// String: '11'</span>\n<span class=\"hljs-keyword\">let</span> x = [<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// String: '11'</span></code></pre>\n<h2>Sources</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">developer.mozilla.org</a></li>\n<li><a href=\"https://javascript.info/types\">javascript.info</a></li>\n<li><a href=\"https://dmitripavlutin.com/javascriptss-addition-operator-demystified/\">dmitripavlutin.com</a></li>\n</ul>\n"}},"__N_SSG":true}