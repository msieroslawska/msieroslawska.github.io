{"pageProps":{"codelog":{"tags":["react","testing","devtools"],"title":"2019-05-13","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Reanimate tests in my React calc app.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Cover UI with tests (<em>in progress</em>)!</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Finish watching - <a href=\"https://frontendmasters.com/courses/chrome-dev-tools-v2/\">Mastering Chrome Developer Tools, v2</a> by Jon Kuperman.</li>\n</ul>\n<h2>Learned today</h2>\n<ul>\n<li>It was easier to create a new <code>create-react-app</code> project from scratch than to figure out what to add to have running tests (note to self: don't try to be smart with \"I'll add it later by myself\" attitude and just keep stuff you know you will need later like, you know, tests!). I kept my components and styling. It was as easy as copying few files and re-installing some dependencies.</li>\n<li>Even though I work with React almost on a daily basis, I've never set up tests by myself. It's really interesting to see how it works from scratch!</li>\n</ul>\n<h3>Snapshot testing</h3>\n<p>Testing React involves UI which should stay stable and not change unexpetedly. Snapshot tests render a component and compare its state with a reference snapshot stored with the test.</p>\n<p><strong>Jest</strong> allows you to render and test separate components, without the need to build and render the whole app UI.</p>\n<ul>\n<li>\n<p>I got my first tests running!!</p>\n<p><img src=\"../../assets/img/blog/first-jest-tests.png\" alt=\"First Jest tests\"></p>\n<p>Now I <em>only</em> need to figure out how exactly Jest knows when tests are okay, but it's the snapshot what should be updated...</p>\n</li>\n</ul>\n<h3>[Chrome DevTools] Page Jank</h3>\n<p>It's jittering / jumping happening on websites, where a smooth scrolling would be expected. Obviously a bug.</p>\n<p>Possible reasons:</p>\n<ul>\n<li>\n<p>JS being too heavy</p>\n<p>Smooth scrolling is defined at 60 frames / s, as the refresh rate on most devices nowadays. The browser needs to come up with a new picture (frame) for each of those refreshes. If it fails (because for example, it's busy trying to process bloated JS), we do not see smooth animation anymore.</p>\n</li>\n<li>\n<p>Page trashing</p>\n<p>Constantly modifying DOM (reading / writing) triggers the browser to keep refreshing the layout. Ideally instead of doing it in multiple read / write cycles, it's better to group similar actions together in batches for fewer layout refreshes. This, however, is rarely achievable.</p>\n<p>Solutions:</p>\n<ul>\n<li><code>window.requestAnimationFrame()</code> asks the browser to do some computation before next frame,</li>\n<li><code>FastDOM</code> library provides callbacks on read and write.</li>\n</ul>\n</li>\n</ul>\n<h3>[Chrome DevTools] Memory</h3>\n<p>Garbage collector removes objects which are flagged as unused and no longer referenced. Sometimes though it is not possible to apply the flag (memory keeps being used) and this might be the cause of memory leaks.</p>\n<p>Possible reasons:</p>\n<ul>\n<li>\n<p>global variables (are you sure it has to be a global?),</p>\n</li>\n<li>\n<p>forgotten timers and intervals,</p>\n</li>\n<li>\n<p>variables which hold references to DOM objects which no longer exist (e.g. were deleted),</p>\n</li>\n<li>\n<p><em>Performance</em> tab in DevTools helps you detect memory leaks while <em>Memory</em> tab shows you the exact reason(s).</p>\n</li>\n<li>\n<p>When recording a performance session for memory, you'd want to make it slightly <strong>longer</strong> (to build up memory consumption data) than in case of CPU performance tests.</p>\n</li>\n</ul>\n<h4>Task manager in Chrome</h4>\n<ul>\n<li>Accessible via <em>Three dots menu</em> > <em>More tools</em> > <em>Task manager</em></li>\n<li>Monitors performance of each Chrome tab</li>\n<li>Right-click on column names to access more data, e.g. <em>JavaScript memory</em></li>\n</ul>\n<h4>Memory profiles</h4>\n<ul>\n<li>Heap snapshot: shows everything that's being used. Can be run multiple times to get results to be compared.</li>\n<li>Allocation instrumentation on timeline: like multimple heap snapshots, takes a lot of time.</li>\n<li>Allocation sampling: takes different samples over long period of time.</li>\n</ul>\n<p><strong>Shallow size</strong>: how big are you?\nExample: an array with 50 elements</p>\n<p><strong>Retained size</strong>: how big are elements you're pointing at (how much memory can we free up if we get rid of you)?\nExample: a variable pointing to an array with 1m elements</p>\n<p>Aaaand that's how I have finished the \"Mastering Chrome developer tools\" class! Time for more!</p>\n<h2>Resources list</h2>\n<ul>\n<li><a href=\"https://jestjs.io/docs/en/tutorial-react\">Jest docs</a></li>\n<li><a href=\"https://jestjs.io/docs/en/snapshot-testing\">Jest snapshot testing</a></li>\n<li><a href=\"https://medium.com/reloading/javascript-start-up-performance-69200f43b201\">JS startup performance</a></li>\n</ul>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}