{"pageProps":{"codelog":{"tags":["javascript","functional programming","es6","spread","arrays"],"title":"2019-05-29","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Continue watching <a href=\"https://frontendmasters.com/courses/js-fundamentals-functional-v2/\">JavaScript: From Fundamentals to Functional JS, v2</a> by Bianca Gandolfo</li>\n</ul>\n<h2>Learned today</h2>\n<h3><code>_.map()</code> / <code>map()</code></h3>\n<p><code>_</code> comes from <a href=\"https://underscorejs.org/\">underscore library</a></p>\n<p><code>map</code> produces a new array of values by mapping each value in <strong>list</strong> through the transformation function. Each invocation of the iterator is called with <em>element</em>, <em>index</em> and <em>list</em> arguments. If list is an object, iterator will be called with <em>value</em>, <em>key</em>, <em>list</em>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'z'</span>];\n\n_.map(a, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, idx</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(value, idx);\n});\n\na.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, idx</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(value, idx);\n});</code></pre>\n<h3><code>map</code> vs. <code>forEach</code></h3>\n<p><code>forEach</code> does not return anything, <code>map</code> returns an array. In the above examples, <code>console.log</code> does not return anything, so <code>map</code> will return an array: <code>[undefined, undefined, undefined]</code>.</p>\n<h3>ES6 arrow vs. regular functions</h3>\n<ul>\n<li>Arrow functions do not have their own <code>this</code>, they inherit it from the parent.</li>\n<li>Arrow functions do not have <code>arguments</code> keyword.</li>\n<li>Arrow functions can get confusing especially without an explicit return (\"is it a statement or return?\").</li>\n</ul>\n<h3>Spread operator</h3>\n<p>Returns an array of objects which were not picked up as arguments:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> logSpreadArgument = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b, ...c</span>) =></span> {\n  <span class=\"hljs-built_in\">console</span>.log(a, b, c);\n};\nlogSpreadArgument(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// 1, 2, [3, 4]</span></code></pre>\n<h3>Arguments keyword</h3>\n<p>Returns a pseudo-array of all arguments:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> logArguments = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);\n};\nlogArguments(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// Arguments { 0: 1, 1: 2, 2: 3, 3: 4 }</span>\nlogArguments(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-string\">'y'</span>]); <span class=\"hljs-comment\">// Arguments { 0: 1, 1: 2, 2: 3, 3: ['x', 'y'] }</span></code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> logArgumentsWithError = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);\n};\nlogArgumentsWithError(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// ReferenceError: arguments is not defined</span></code></pre>\n<h3>Creating arrays</h3>\n<p>ES5:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> makeArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n};\n\nmakeArray(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// [1, 2, 3]</span></code></pre>\n<p>ES6:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> makeAnotherArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-built_in\">arguments</span>);\n};\n\nmakeAnotherArray(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// [1, 2, 3]</span></code></pre>\n<h2>Resources list</h2>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}