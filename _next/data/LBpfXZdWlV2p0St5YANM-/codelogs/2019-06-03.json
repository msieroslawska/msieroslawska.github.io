{"pageProps":{"codelog":{"tags":["javascript","asynchronism"],"title":"2019-06-03","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Continue watching <a href=\"https://frontendmasters.com/courses/javascript-hard-parts/\">JavaScript: The Hard Parts</a> by Will Sentance</li>\n</ul>\n<h2>Learned today</h2>\n<h3>Asynchronous JS</h3>\n<p>This works as expected, <code>Hey!</code> prints first, <code>Hello</code> prints at least 1000 ms later.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">printHello</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello'</span>);\n}\n\n<span class=\"hljs-built_in\">setTimeout</span>(printHello, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hey!`);</span></code></pre>\n<p>But this? It also prints <code>Hey!</code> first and <code>Hello</code> after that, why??</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">printHello</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello'</span>);\n}\n\n<span class=\"hljs-built_in\">setTimeout</span>(printHello, <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hey!`);</span></code></pre>\n<p>So far we've been using the following components:</p>\n<ol>\n<li>Thread of execution</li>\n<li>Variable environment</li>\n<li>Call stack</li>\n</ol>\n<p>To understand this, we need to add 3 more components:</p>\n<ol>\n<li>Web browser APIs / Node background threads</li>\n<li>Callback / Message / Task queue</li>\n<li>Event loop</li>\n</ol>\n<h4>Browser API</h4>\n<p>JS is running in an environment which is able to spin up more threads than just one, including setting up a timer. These features are not part of JS, hence we call them APIs.</p>\n<p>In the example above, <code>setTimeout</code> does not call <code>printHello</code>. It communicates with the browser API telling it to start a timer. After it counts down to 0, it pushes <code>printHello</code> to the call stack.</p>\n<h2>Resources list</h2>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}