{"pageProps":{"codelog":{"tags":["javascript","coercion"],"title":"2019-05-14","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Start watching - <a href=\"https://frontendmasters.com/courses/javascript-basics/\">Introduction to JavaScript Programming</a> by Kyle Simpson.</li>\n</ul>\n<h2>Learned today</h2>\n<p>I believe there is a significant value in going through the basics and filling the knowledge gaps otherwise you might have thought you got covered. That is why I am not skipping the beginner track in FM and watching all classes.</p>\n<h3>Statements</h3>\n<p>This is a statement: <code>a = b * 2;</code>. The rule of thumb is, statements end up with a semicolon <code>;</code>.</p>\n<h3>Expressions</h3>\n<p>The example statement consists of multiple expressions:</p>\n<ul>\n<li>a literal expression of value <code>2</code>,</li>\n<li>two identifier expressions <code>b</code> and <code>a</code>,</li>\n<li>an arithmetic expression <code>b * 2</code>,</li>\n<li>an assignment expression <code>a = b * 2</code> (without the semicolon) which is also an ex pression statement (is the last one).</li>\n</ul>\n<h3>Order of evaluation</h3>\n<p>Evaluation happens from left to right. In <code>b * 2</code> <code>b</code> gets evaluated first.</p>\n<p>Binary operators (operators requiring two expressions) have separate rules defining the order of evaluation which can override the general left-to-right rule.</p>\n<ol>\n<li>Parenthesis</li>\n<li>Multiplication and division</li>\n<li>Addition and subtraction</li>\n</ol>\n<p>This means that <code>2 * 2 + 1</code> will evaluate to <code>5</code>, not <code>6</code>.\n<code>2 * (2 + 1)</code> will evaluate to <code>6</code>, not <code>5</code>.</p>\n<h3>Executing a program</h3>\n<p>Computer needs to know what to do with human-readable statements like <code>b * 2</code>. The process of translating it to a form understood by computers is called <strong>compiling</strong> or <strong>interpreting</strong>.</p>\n<p>Languages which are interpreted are translated line by line, from top to bottom, every time the program is run.</p>\n<p>Other languages are pre-processed ahead of time (compiled), so when the program runs later, it actually is using the compiled version.</p>\n<p>JavaScript might be technically labeled as <em>interpreted</em> language, because it is procesed every time it's run. This is not entirely true, as JavaScript engine <em>compiles</em> the code on the fly and then immediately runs it.</p>\n<p>This means JS code is processed <strong>twice</strong>. The following code snippet run as JS code would immediately throw an error about line 2:</p>\n<pre><code class=\"hljs language-javascript\">a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-number\">2</span>();</code></pre>\n<p>In the meantime, a true interpreted / scripted language would first go through line 1 and only then throw an error about line 2.</p>\n<p>JavaScript provides two types of errors:</p>\n<ul>\n<li><strong>static</strong> : something is wrong with the syntax,</li>\n<li><strong>runtime</strong> : syntax was right, but you tried to do something invalid with it (e.g. assign to a const).</li>\n</ul>\n<h3>Explicit / implicit variable coertion</h3>\n<p><strong>Variables</strong> do not have types. <strong>Values</strong> have types.</p>\n<h4>Explicit</h4>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">42</span>;\n<span class=\"hljs-keyword\">typeof</span> a; <span class=\"hljs-comment\">// Number</span>\na = <span class=\"hljs-built_in\">String</span>(a);\n<span class=\"hljs-keyword\">typeof</span> a; <span class=\"hljs-comment\">// String</span>\na = <span class=\"hljs-built_in\">Number</span>(a);\n<span class=\"hljs-keyword\">typeof</span> a; <span class=\"hljs-comment\">// Number</span>\na.toString();\n<span class=\"hljs-keyword\">typeof</span> a; <span class=\"hljs-comment\">// String</span></code></pre>\n<h4>Implicit</h4>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">42</span>;\n<span class=\"hljs-keyword\">typeof</span> a; <span class=\"hljs-comment\">// Number</span>\na = a + <span class=\"hljs-string\">'a'</span>;\n<span class=\"hljs-keyword\">typeof</span> a; <span class=\"hljs-comment\">// String</span></code></pre>\n<h2>Resources list</h2>\n<ul>\n<li><a href=\"http://jsforcats.com/\">JavaScript for cats</a></li>\n<li><a href=\"https://eloquentjavascript.net/\">Eloquent JavaScript</a></li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\">You don't know JS</a></li>\n</ul>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}