{"pageProps":{"codelog":{"tags":["javascript","closures","scope"],"title":"2019-06-02","content":"<h2>Plan for the day</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Continue watching <a href=\"https://frontendmasters.com/courses/javascript-hard-parts/\">JavaScript: The Hard Parts</a> by Will Sentance</li>\n</ul>\n<h2>Learned today</h2>\n<h3>Closures</h3>\n<p>When functions get called, we create a live stote of data (variable environment) for that function's execution context. When it finishes executing, its local memory is deleted (except the returned value).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">instructionGenerator</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">multiplyBy2</span>(<span class=\"hljs-params\">num</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> num * <span class=\"hljs-number\">2</span>;\n  }\n}\n<span class=\"hljs-keyword\">let</span> generatedFunc = instructionGenerator();\n<span class=\"hljs-keyword\">let</span> result = generatedFunc(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 6</span></code></pre>\n<p>In the example above, calling <code>instructionGenerator</code> returns a function, which gets assigned into <code>generatedFunc</code>. <code>multiplyBy2</code> is no longer available under that label, it is accessible under <code>generatedFunc</code>.</p>\n<p><em>Where</em> you define your functions determines what variables they will have access to when called.</p>\n<p>If you try to call inner function outside of where it was defined, it <strong>will not</strong> work:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">incrementCounter</span>(<span class=\"hljs-params\"></span>) </span>{\n    counter++;\n  }\n  incrementCounter();\n}\nouter();\nincrementCounter(); <span class=\"hljs-comment\">// ReferenceError: incrementCounter is not defined</span></code></pre>\n<p>To keep access to the inner function, you can return it and assign it to a new variable:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">incrementCounter</span>(<span class=\"hljs-params\"></span>) </span>{\n    counter++;\n  }\n  <span class=\"hljs-keyword\">return</span> incrementedCounter;\n}\n\n<span class=\"hljs-keyword\">let</span> myFunction = outer();\nmyFunction();</code></pre>\n<p>Again, <strong>where (when) you define a function</strong> (not where you call it) determines what variables it has access to when you call it. In the example above, <code>incrementCounter</code> had access to <code>counter</code> when it was defined. Behind the scenes, <code>incrementCounter</code> also got access to all the surrounding data. Returning it returns the function AND the surrounding data (but only data which is needed).</p>\n<h4>Lexical scope</h4>\n<p>When a function is defined, it gets a <code>[[scope]]</code> property that references the <em>Variable Environment</em> in which it has been defined. When looking for a variable definition, it first looks in its local scope, then in <code>[[scope]]</code> and only after that goes down to scopes from the call stack. This is why JS is called <em>lexically / statically scoped</em>.</p>\n<h2>Resources list</h2>\n<h2>Other resources</h2>\n"}},"__N_SSG":true}